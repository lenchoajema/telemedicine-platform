{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutPropertiesLoose = require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\");\nconst _excluded = [\"name\", \"size\", \"color\", \"style\", \"children\", \"allowFontScaling\", \"innerRef\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_ICON_SIZE = exports.DEFAULT_ICON_COLOR = void 0;\nexports.createIconSet = createIconSet;\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar _createIconSourceCache = _interopRequireDefault(require(\"./create-icon-source-cache.js\"));\nvar _dynamicFontLoading = require(\"./dynamicLoading/dynamic-font-loading\");\nvar _dynamicLoadingSetting = require(\"./dynamicLoading/dynamic-loading-setting.js\");\nvar _getImageLibrary = require(\"./get-image-library.js\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nfunction _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    default: e\n  };\n}\nfunction _getRequireWildcardCache(e) {\n  if (\"function\" != typeof WeakMap) return null;\n  var r = new WeakMap(),\n    t = new WeakMap();\n  return (_getRequireWildcardCache = function (e) {\n    return e ? t : r;\n  })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n  if (!r && e && e.__esModule) return e;\n  if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n    default: e\n  };\n  var t = _getRequireWildcardCache(r);\n  if (t && t.has(e)) return t.get(e);\n  var n = {\n      __proto__: null\n    },\n    a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) {\n    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n  }\n  return n.default = e, t && t.set(e, n), n;\n}\nconst DEFAULT_ICON_SIZE = exports.DEFAULT_ICON_SIZE = 12;\nconst DEFAULT_ICON_COLOR = exports.DEFAULT_ICON_COLOR = 'black';\nfunction createIconSet(glyphMap, postScriptNameOrOptions, fontFileNameParam, fontStyleParam) {\n  const {\n    postScriptName,\n    fontFileName,\n    fontStyle\n  } = typeof postScriptNameOrOptions === 'string' ? {\n    postScriptName: postScriptNameOrOptions,\n    fontFileName: fontFileNameParam,\n    fontStyle: fontStyleParam\n  } : postScriptNameOrOptions;\n  const fontBasename = fontFileName ? fontFileName.replace(/\\.(otf|ttf)$/, '') : postScriptName;\n  const fontReference = _reactNative.Platform.select({\n    windows: `/Assets/${fontFileName}#${postScriptName}`,\n    android: fontBasename,\n    default: postScriptName\n  });\n  const styleOverrides = {\n    fontFamily: fontReference,\n    fontWeight: 'normal',\n    fontStyle: 'normal'\n  };\n  const resolveGlyph = name => {\n    const glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  };\n  const Icon = _ref => {\n    let {\n        name,\n        size = DEFAULT_ICON_SIZE,\n        color = DEFAULT_ICON_COLOR,\n        style,\n        children,\n        allowFontScaling = false,\n        innerRef\n      } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const [isFontLoaded, setIsFontLoaded] = _react.default.useState((0, _dynamicLoadingSetting.isDynamicLoadingEnabled)() ? _dynamicFontLoading.dynamicLoader.isLoaded(fontReference) : true);\n    const glyph = isFontLoaded && name ? resolveGlyph(name) : '';\n    (0, _react.useEffect)(() => {\n      let isMounted = true;\n      if (!isFontLoaded && typeof postScriptNameOrOptions === 'object' && typeof postScriptNameOrOptions.fontSource !== 'undefined') {\n        _dynamicFontLoading.dynamicLoader.loadFontAsync(fontReference, postScriptNameOrOptions.fontSource).finally(() => {\n          if (isMounted) {\n            setIsFontLoaded(true);\n          }\n        });\n      }\n      return () => {\n        isMounted = false;\n      };\n    }, []);\n    const styleDefaults = {\n      fontSize: size,\n      color\n    };\n    const newProps = Object.assign({}, props, {\n      style: [styleDefaults, style, styleOverrides, fontStyle || {}],\n      allowFontScaling\n    });\n    return (0, _jsxRuntime.jsxs)(_reactNative.Text, Object.assign({\n      ref: innerRef,\n      selectable: false\n    }, newProps, {\n      children: [glyph, children]\n    }));\n  };\n  const WrappedIcon = (0, _react.forwardRef)((props, ref) => (0, _jsxRuntime.jsx)(Icon, Object.assign({\n    innerRef: ref\n  }, props)));\n  WrappedIcon.displayName = 'Icon';\n  const imageSourceCache = (0, _createIconSourceCache.default)();\n  const getImageSourceSync = (name, size = DEFAULT_ICON_SIZE, color = DEFAULT_ICON_COLOR) => {\n    const NativeIconAPI = (0, _getImageLibrary.ensureGetImageAvailable)();\n    const glyph = resolveGlyph(name);\n    const processedColor = (0, _reactNative.processColor)(color);\n    const cacheKey = `${glyph}:${size}:${String(processedColor)}`;\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(fontReference, glyph, size, processedColor);\n      const value = {\n        uri: imagePath,\n        scale: _reactNative.PixelRatio.get()\n      };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  };\n  const getImageSource = async (name, size = DEFAULT_ICON_SIZE, color = DEFAULT_ICON_COLOR) => {\n    const NativeIconAPI = (0, _getImageLibrary.ensureGetImageAvailable)();\n    const glyph = resolveGlyph(name);\n    const processedColor = (0, _reactNative.processColor)(color);\n    const cacheKey = `${glyph}:${size}:${String(processedColor)}`;\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor);\n      const value = {\n        uri: imagePath,\n        scale: _reactNative.PixelRatio.get()\n      };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  };\n  const IconNamespace = Object.assign(WrappedIcon, {\n    getImageSource,\n    getImageSourceSync\n  });\n  return IconNamespace;\n}","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_createIconSourceCache","_interopRequireDefault","_dynamicFontLoading","_dynamicLoadingSetting","_getImageLibrary","_jsxRuntime","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","DEFAULT_ICON_SIZE","exports","DEFAULT_ICON_COLOR","createIconSet","glyphMap","postScriptNameOrOptions","fontFileNameParam","fontStyleParam","postScriptName","fontFileName","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","styleOverrides","fontFamily","fontWeight","resolveGlyph","name","glyph","String","fromCodePoint","Icon","_ref","size","color","style","children","allowFontScaling","innerRef","props","_objectWithoutPropertiesLoose","_excluded","isFontLoaded","setIsFontLoaded","useState","isDynamicLoadingEnabled","dynamicLoader","isLoaded","useEffect","isMounted","fontSource","loadFontAsync","finally","styleDefaults","fontSize","newProps","assign","jsxs","Text","ref","selectable","WrappedIcon","forwardRef","jsx","displayName","imageSourceCache","getImageSourceSync","NativeIconAPI","ensureGetImageAvailable","processedColor","processColor","cacheKey","imagePath","getImageForFontSync","value","uri","scale","PixelRatio","setValue","error","setError","getImageSource","getImageForFont","IconNamespace"],"sources":["/workspaces/telemedicine-platform/mobile-app/node_modules/@react-native-vector-icons/common/src/create-icon-set.tsx"],"sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies\nimport React, { forwardRef, type Ref, useEffect } from 'react';\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { PixelRatio, Platform, Text, type TextProps, type TextStyle, processColor } from 'react-native';\n\nimport createIconSourceCache from './create-icon-source-cache';\nimport { dynamicLoader } from './dynamicLoading/dynamic-font-loading';\nimport { isDynamicLoadingEnabled } from './dynamicLoading/dynamic-loading-setting';\nimport type { FontSource } from './dynamicLoading/types';\nimport { ensureGetImageAvailable } from './get-image-library';\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\ntype ValueData = { uri: string; scale: number };\ntype GetImageSourceSyncIconFunc<GM> = (name: GM, size?: number, color?: TextStyle['color']) => ValueData | undefined;\ntype GetImageSourceIconFunc<GM> = (\n  name: GM,\n  size?: number,\n  color?: TextStyle['color'],\n) => Promise<ValueData | undefined>;\n\nexport type IconProps<T> = TextProps & {\n  name: T;\n  size?: number;\n  color?: TextStyle['color'];\n  innerRef?: Ref<Text>;\n};\n\ntype IconComponent<GM extends Record<string, number>> = React.FC<\n  TextProps & {\n    name: keyof GM;\n    size?: number;\n    color?: TextStyle['color'];\n    innerRef?: Ref<Text>;\n  } & React.RefAttributes<Text>\n> & {\n  getImageSource: GetImageSourceIconFunc<keyof GM>;\n  getImageSourceSync: GetImageSourceSyncIconFunc<keyof GM>;\n};\n\nexport type CreateIconSetOptions = {\n  postScriptName: string;\n  fontFileName: string;\n  fontSource?: FontSource;\n  fontStyle?: TextProps['style'];\n};\n\nexport function createIconSet<GM extends Record<string, number>>(\n  glyphMap: GM,\n  postScriptName: string,\n  fontFileName: string,\n  fontStyle?: TextProps['style'],\n): IconComponent<GM>;\nexport function createIconSet<GM extends Record<string, number>>(\n  glyphMap: GM,\n  options: CreateIconSetOptions,\n): IconComponent<GM>;\nexport function createIconSet<GM extends Record<string, number>>(\n  glyphMap: GM,\n  postScriptNameOrOptions: string | CreateIconSetOptions,\n  fontFileNameParam?: string,\n  fontStyleParam?: TextProps['style'],\n): IconComponent<GM> {\n  const { postScriptName, fontFileName, fontStyle } =\n    typeof postScriptNameOrOptions === 'string'\n      ? { postScriptName: postScriptNameOrOptions, fontFileName: fontFileNameParam, fontStyle: fontStyleParam }\n      : postScriptNameOrOptions;\n\n  const fontBasename = fontFileName ? fontFileName.replace(/\\.(otf|ttf)$/, '') : postScriptName;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFileName}#${postScriptName}`,\n    android: fontBasename,\n    default: postScriptName,\n  });\n\n  const styleOverrides: TextProps['style'] = {\n    fontFamily: fontReference,\n    fontWeight: 'normal',\n    fontStyle: 'normal',\n  };\n\n  const resolveGlyph = (name: keyof GM) => {\n    const glyph = glyphMap[name] || '?';\n\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n\n    return glyph;\n  };\n\n  const Icon = ({\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR,\n    style,\n    children,\n    allowFontScaling = false,\n    innerRef,\n    ...props\n  }: IconProps<keyof GM>) => {\n    const [isFontLoaded, setIsFontLoaded] = React.useState(\n      isDynamicLoadingEnabled() ? dynamicLoader.isLoaded(fontReference) : true,\n    );\n    const glyph = isFontLoaded && name ? resolveGlyph(name) : '';\n\n    // biome-ignore lint/correctness/useExhaustiveDependencies: the dependencies never change\n    useEffect(() => {\n      let isMounted = true;\n\n      if (\n        !isFontLoaded &&\n        typeof postScriptNameOrOptions === 'object' &&\n        typeof postScriptNameOrOptions.fontSource !== 'undefined'\n      ) {\n        dynamicLoader.loadFontAsync(fontReference, postScriptNameOrOptions.fontSource).finally(() => {\n          if (isMounted) {\n            setIsFontLoaded(true);\n          }\n        });\n      }\n      return () => {\n        isMounted = false;\n      };\n    }, []);\n\n    const styleDefaults = {\n      fontSize: size,\n      color,\n    };\n\n    const newProps: TextProps = {\n      ...props,\n      style: [styleDefaults, style, styleOverrides, fontStyle || {}],\n      allowFontScaling,\n    };\n\n    return (\n      <Text ref={innerRef} selectable={false} {...newProps}>\n        {glyph}\n        {children}\n      </Text>\n    );\n  };\n\n  const WrappedIcon = forwardRef<Text, IconProps<keyof typeof glyphMap>>((props, ref) => (\n    <Icon innerRef={ref} {...props} />\n  ));\n  WrappedIcon.displayName = 'Icon';\n\n  const imageSourceCache = createIconSourceCache();\n\n  const getImageSourceSync = (\n    name: keyof GM,\n    size = DEFAULT_ICON_SIZE,\n    color: TextStyle['color'] = DEFAULT_ICON_COLOR,\n  ) => {\n    const NativeIconAPI = ensureGetImageAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${String(processedColor)}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      // FIXME: Should this check if it's an error and throw it again?\n      return imageSourceCache.get(cacheKey);\n    }\n\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(\n        fontReference,\n        glyph,\n        size,\n        processedColor as number, // FIXME what if a non existant colour was passed in?\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error as Error);\n      throw error;\n    }\n  };\n\n  const getImageSource = async (\n    name: keyof GM,\n    size = DEFAULT_ICON_SIZE,\n    color: TextStyle['color'] = DEFAULT_ICON_COLOR,\n  ) => {\n    const NativeIconAPI = ensureGetImageAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${String(processedColor)}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      // FIXME: Should this check if it's an error and throw it again?\n      return imageSourceCache.get(cacheKey);\n    }\n\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(\n        fontReference,\n        glyph,\n        size,\n        processedColor as number, // FIXME what if a non existant colour was passed in?\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error as Error);\n      throw error;\n    }\n  };\n\n  const IconNamespace = Object.assign(WrappedIcon, {\n    getImageSource,\n    getImageSourceSync,\n  });\n\n  return IconNamespace;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}