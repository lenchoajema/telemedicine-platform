{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport MediaStream from \"./MediaStream\";\nimport MediaStreamError from \"./MediaStreamError\";\nimport permissions from \"./Permissions\";\nimport * as RTCUtil from \"./RTCUtil\";\nvar WebRTCModule = NativeModules.WebRTCModule;\nexport default function getUserMedia() {\n  var constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (typeof constraints !== 'object') {\n    return Promise.reject(new TypeError('constraints is not a dictionary'));\n  }\n  if ((typeof constraints.audio === 'undefined' || !constraints.audio) && (typeof constraints.video === 'undefined' || !constraints.video)) {\n    return Promise.reject(new TypeError('audio and/or video is required'));\n  }\n  constraints = RTCUtil.normalizeConstraints(constraints);\n  var reqPermissions = [];\n  if (constraints.audio) {\n    reqPermissions.push(permissions.request({\n      name: 'microphone'\n    }));\n  } else {\n    reqPermissions.push(Promise.resolve(false));\n  }\n  if (constraints.video) {\n    reqPermissions.push(permissions.request({\n      name: 'camera'\n    }));\n  } else {\n    reqPermissions.push(Promise.resolve(false));\n  }\n  return new Promise(function (resolve, reject) {\n    Promise.all(reqPermissions).then(function (results) {\n      var _results = _slicedToArray(results, 2),\n        audioPerm = _results[0],\n        videoPerm = _results[1];\n      if (!audioPerm && !videoPerm) {\n        var error = {\n          message: 'Permission denied.',\n          name: 'SecurityError'\n        };\n        reject(new MediaStreamError(error));\n        return;\n      }\n      audioPerm || delete constraints.audio;\n      videoPerm || delete constraints.video;\n      var success = function success(id, tracks) {\n        for (var trackInfo of tracks) {\n          var c = constraints[trackInfo.kind];\n          if (typeof c === 'object') {\n            trackInfo.constraints = RTCUtil.deepClone(c);\n          }\n        }\n        var info = {\n          streamId: id,\n          streamReactTag: id,\n          tracks: tracks\n        };\n        resolve(new MediaStream(info));\n      };\n      var failure = function failure(type, message) {\n        var error;\n        switch (type) {\n          case 'TypeError':\n            error = new TypeError(message);\n            break;\n        }\n        if (!error) {\n          error = new MediaStreamError({\n            message: message,\n            name: type\n          });\n        }\n        reject(error);\n      };\n      WebRTCModule.getUserMedia(constraints, success, failure);\n    });\n  });\n}","map":{"version":3,"names":["MediaStream","MediaStreamError","permissions","RTCUtil","WebRTCModule","NativeModules","getUserMedia","constraints","arguments","length","undefined","Promise","reject","TypeError","audio","video","normalizeConstraints","reqPermissions","push","request","name","resolve","all","then","results","_results","_slicedToArray","audioPerm","videoPerm","error","message","success","id","tracks","trackInfo","c","kind","deepClone","info","streamId","streamReactTag","failure","type"],"sources":["/workspaces/telemedicine-platform/mobile-app/node_modules/react-native-webrtc/src/getUserMedia.ts"],"sourcesContent":["\nimport { NativeModules } from 'react-native';\n\n\nimport MediaStream from './MediaStream';\nimport MediaStreamError from './MediaStreamError';\nimport permissions from './Permissions';\nimport * as RTCUtil from './RTCUtil';\n\nconst { WebRTCModule } = NativeModules;\n\ninterface Constraints {\n    audio?: boolean | object;\n    video?: boolean | object;\n}\n\nexport default function getUserMedia(constraints: Constraints = {}): Promise<MediaStream> {\n    // According to\n    // https://www.w3.org/TR/mediacapture-streams/#dom-mediadevices-getusermedia,\n    // the constraints argument is a dictionary of type MediaStreamConstraints.\n    if (typeof constraints !== 'object') {\n        return Promise.reject(new TypeError('constraints is not a dictionary'));\n    }\n\n    if (\n        (typeof constraints.audio === 'undefined' || !constraints.audio) &&\n        (typeof constraints.video === 'undefined' || !constraints.video)\n    ) {\n        return Promise.reject(new TypeError('audio and/or video is required'));\n    }\n\n    // Normalize constraints.\n    constraints = RTCUtil.normalizeConstraints(constraints);\n\n    // Request required permissions\n    const reqPermissions: Promise<boolean>[] = [];\n\n    if (constraints.audio) {\n        reqPermissions.push(permissions.request({ name: 'microphone' }));\n    } else {\n        reqPermissions.push(Promise.resolve(false));\n    }\n\n    if (constraints.video) {\n        reqPermissions.push(permissions.request({ name: 'camera' }));\n    } else {\n        reqPermissions.push(Promise.resolve(false));\n    }\n\n    return new Promise((resolve, reject) => {\n        Promise.all(reqPermissions).then(results => {\n            const [ audioPerm, videoPerm ] = results;\n\n            // Check permission results and remove unneeded permissions.\n\n            if (!audioPerm && !videoPerm) {\n                // https://www.w3.org/TR/mediacapture-streams/#dom-mediadevices-getusermedia\n                // step 4\n                const error = {\n                    message: 'Permission denied.',\n                    name: 'SecurityError'\n                };\n\n                reject(new MediaStreamError(error));\n\n                return;\n            }\n\n            audioPerm || delete constraints.audio;\n            videoPerm || delete constraints.video;\n\n            const success = (id, tracks) => {\n                // Store initial constraints.\n                for (const trackInfo of tracks) {\n                    const c = constraints[trackInfo.kind];\n\n                    if (typeof c === 'object') {\n                        trackInfo.constraints = RTCUtil.deepClone(c);\n                    }\n                }\n\n                const info = {\n                    streamId: id,\n                    streamReactTag: id,\n                    tracks\n                };\n\n                resolve(new MediaStream(info));\n            };\n\n            const failure = (type, message) => {\n                let error;\n\n                switch (type) {\n                    case 'TypeError':\n                        error = new TypeError(message);\n                        break;\n                }\n\n                if (!error) {\n                    error = new MediaStreamError({ message, name: type });\n                }\n\n                reject(error);\n            };\n\n            WebRTCModule.getUserMedia(constraints, success, failure);\n        });\n    });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}