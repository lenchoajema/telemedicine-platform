{"ast":null,"code":"var _jsxFileName = \"/workspaces/telemedicine-platform/mobile-app/src/context/AuthContext.tsx\";\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { AuthService } from \"../services/AuthService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = createContext(undefined);\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const isAuthenticated = !!user && !!token;\n  useEffect(() => {\n    initializeAuth();\n  }, []);\n  const initializeAuth = async () => {\n    try {\n      setIsLoading(true);\n      const storedToken = await AsyncStorage.getItem('authToken');\n      const storedUser = await AsyncStorage.getItem('user');\n      if (storedToken && storedUser) {\n        setToken(storedToken);\n        setUser(JSON.parse(storedUser));\n        try {\n          await AuthService.getCurrentUser(storedToken);\n        } catch (error) {\n          await clearAuthData();\n        }\n      }\n    } catch (error) {\n      console.error('Error initializing auth:', error);\n      await clearAuthData();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setIsLoading(true);\n      const response = await AuthService.login(email, password);\n      if (response.success && response.data) {\n        const {\n          user: userData,\n          token: authToken\n        } = response.data;\n        await AsyncStorage.setItem('authToken', authToken);\n        await AsyncStorage.setItem('user', JSON.stringify(userData));\n        setToken(authToken);\n        setUser(userData);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      setIsLoading(true);\n      const response = await AuthService.register(userData);\n      if (response.success && response.data) {\n        const {\n          user: newUser,\n          token: authToken\n        } = response.data;\n        await AsyncStorage.setItem('authToken', authToken);\n        await AsyncStorage.setItem('user', JSON.stringify(newUser));\n        setToken(authToken);\n        setUser(newUser);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Registration error:', error);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      setIsLoading(true);\n      await clearAuthData();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const refreshUser = async () => {\n    if (!token) return;\n    try {\n      const response = await AuthService.getCurrentUser(token);\n      if (response.success && response.data) {\n        const userData = response.data.user;\n        await AsyncStorage.setItem('user', JSON.stringify(userData));\n        setUser(userData);\n      }\n    } catch (error) {\n      console.error('Error refreshing user:', error);\n      await clearAuthData();\n    }\n  };\n  const clearAuthData = async () => {\n    await AsyncStorage.removeItem('authToken');\n    await AsyncStorage.removeItem('user');\n    setToken(null);\n    setUser(null);\n  };\n  const value = {\n    user,\n    token,\n    isAuthenticated,\n    isLoading,\n    login,\n    register,\n    logout,\n    refreshUser\n  };\n  return _jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","AsyncStorage","AuthService","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","context","Error","AuthProvider","children","user","setUser","token","setToken","isLoading","setIsLoading","isAuthenticated","initializeAuth","storedToken","getItem","storedUser","JSON","parse","getCurrentUser","error","clearAuthData","console","login","email","password","response","success","data","userData","authToken","setItem","stringify","register","newUser","logout","refreshUser","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/workspaces/telemedicine-platform/mobile-app/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { AuthService } from '../services/AuthService';\n\ninterface User {\n  id: string;\n  email: string;\n  role: 'patient' | 'doctor' | 'admin';\n  profile: {\n    firstName: string;\n    lastName: string;\n    fullName: string;\n  };\n}\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<boolean>;\n  register: (userData: any) => Promise<boolean>;\n  logout: () => Promise<void>;\n  refreshUser: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const isAuthenticated = !!user && !!token;\n\n  // Initialize auth state from storage\n  useEffect(() => {\n    initializeAuth();\n  }, []);\n\n  const initializeAuth = async () => {\n    try {\n      setIsLoading(true);\n      const storedToken = await AsyncStorage.getItem('authToken');\n      const storedUser = await AsyncStorage.getItem('user');\n\n      if (storedToken && storedUser) {\n        setToken(storedToken);\n        setUser(JSON.parse(storedUser));\n        \n        // Verify token is still valid\n        try {\n          await AuthService.getCurrentUser(storedToken);\n        } catch (error) {\n          // Token is invalid, clear auth data\n          await clearAuthData();\n        }\n      }\n    } catch (error) {\n      console.error('Error initializing auth:', error);\n      await clearAuthData();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string): Promise<boolean> => {\n    try {\n      setIsLoading(true);\n      const response = await AuthService.login(email, password);\n      \n      if (response.success && response.data) {\n        const { user: userData, token: authToken } = response.data;\n        \n        await AsyncStorage.setItem('authToken', authToken);\n        await AsyncStorage.setItem('user', JSON.stringify(userData));\n        \n        setToken(authToken);\n        setUser(userData);\n        \n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const register = async (userData: any): Promise<boolean> => {\n    try {\n      setIsLoading(true);\n      const response = await AuthService.register(userData);\n      \n      if (response.success && response.data) {\n        const { user: newUser, token: authToken } = response.data;\n        \n        await AsyncStorage.setItem('authToken', authToken);\n        await AsyncStorage.setItem('user', JSON.stringify(newUser));\n        \n        setToken(authToken);\n        setUser(newUser);\n        \n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Registration error:', error);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      setIsLoading(true);\n      await clearAuthData();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const refreshUser = async (): Promise<void> => {\n    if (!token) return;\n    \n    try {\n      const response = await AuthService.getCurrentUser(token);\n      if (response.success && response.data) {\n        const userData = response.data.user;\n        await AsyncStorage.setItem('user', JSON.stringify(userData));\n        setUser(userData);\n      }\n    } catch (error) {\n      console.error('Error refreshing user:', error);\n      await clearAuthData();\n    }\n  };\n\n  const clearAuthData = async (): Promise<void> => {\n    await AsyncStorage.removeItem('authToken');\n    await AsyncStorage.removeItem('user');\n    setToken(null);\n    setUser(null);\n  };\n\n  const value: AuthContextType = {\n    user,\n    token,\n    isAuthenticated,\n    isLoading,\n    login,\n    register,\n    logout,\n    refreshUser,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}