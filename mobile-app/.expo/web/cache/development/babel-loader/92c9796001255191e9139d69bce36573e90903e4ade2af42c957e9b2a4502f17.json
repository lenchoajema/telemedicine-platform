{"ast":null,"code":"import { apiClient } from \"./ApiClient\";\nexport class AuthService {\n  static async login(email, password) {\n    return await apiClient.post('/auth/login', {\n      email,\n      password\n    });\n  }\n  static async register(userData) {\n    return await apiClient.post('/auth/register', userData);\n  }\n  static async getCurrentUser(token) {\n    return await apiClient.get('/auth/me');\n  }\n  static async logout() {\n    return await apiClient.post('/auth/logout');\n  }\n  static async forgotPassword(email) {\n    return await apiClient.post('/auth/forgot-password', {\n      email\n    });\n  }\n  static async resetPassword(token, newPassword) {\n    return await apiClient.post('/auth/reset-password', {\n      token,\n      password: newPassword\n    });\n  }\n}","map":{"version":3,"names":["apiClient","AuthService","login","email","password","post","register","userData","getCurrentUser","token","get","logout","forgotPassword","resetPassword","newPassword"],"sources":["/workspaces/telemedicine-platform/mobile-app/src/services/AuthService.ts"],"sourcesContent":["import { apiClient } from './ApiClient';\n\nexport class AuthService {\n  static async login(email: string, password: string) {\n    return await apiClient.post('/auth/login', {\n      email,\n      password,\n    });\n  }\n\n  static async register(userData: {\n    email: string;\n    password: string;\n    role: string;\n    profile: {\n      firstName: string;\n      lastName: string;\n    };\n  }) {\n    return await apiClient.post('/auth/register', userData);\n  }\n\n  static async getCurrentUser(token?: string) {\n    return await apiClient.get('/auth/me');\n  }\n\n  static async logout() {\n    // If you have a logout endpoint on your backend\n    return await apiClient.post('/auth/logout');\n  }\n\n  static async forgotPassword(email: string) {\n    return await apiClient.post('/auth/forgot-password', { email });\n  }\n\n  static async resetPassword(token: string, newPassword: string) {\n    return await apiClient.post('/auth/reset-password', {\n      token,\n      password: newPassword,\n    });\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS;AAElB,OAAO,MAAMC,WAAW,CAAC;EACvB,aAAaC,KAAKA,CAACC,KAAa,EAAEC,QAAgB,EAAE;IAClD,OAAO,MAAMJ,SAAS,CAACK,IAAI,CAAC,aAAa,EAAE;MACzCF,KAAK;MACLC;IACF,CAAC,CAAC;EACJ;EAEA,aAAaE,QAAQA,CAACC,QAQrB,EAAE;IACD,OAAO,MAAMP,SAAS,CAACK,IAAI,CAAC,gBAAgB,EAAEE,QAAQ,CAAC;EACzD;EAEA,aAAaC,cAAcA,CAACC,KAAc,EAAE;IAC1C,OAAO,MAAMT,SAAS,CAACU,GAAG,CAAC,UAAU,CAAC;EACxC;EAEA,aAAaC,MAAMA,CAAA,EAAG;IAEpB,OAAO,MAAMX,SAAS,CAACK,IAAI,CAAC,cAAc,CAAC;EAC7C;EAEA,aAAaO,cAAcA,CAACT,KAAa,EAAE;IACzC,OAAO,MAAMH,SAAS,CAACK,IAAI,CAAC,uBAAuB,EAAE;MAAEF;IAAM,CAAC,CAAC;EACjE;EAEA,aAAaU,aAAaA,CAACJ,KAAa,EAAEK,WAAmB,EAAE;IAC7D,OAAO,MAAMd,SAAS,CAACK,IAAI,CAAC,sBAAsB,EAAE;MAClDI,KAAK;MACLL,QAAQ,EAAEU;IACZ,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}