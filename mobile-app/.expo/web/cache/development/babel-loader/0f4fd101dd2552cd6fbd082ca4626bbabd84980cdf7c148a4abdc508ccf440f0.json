{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { apiClient } from \"./ApiClient\";\nexport var AuthService = function () {\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n  }\n  return _createClass(AuthService, null, [{\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator(function* (email, password) {\n        return yield apiClient.post('/auth/login', {\n          email: email,\n          password: password\n        });\n      });\n      function login(_x, _x2) {\n        return _login.apply(this, arguments);\n      }\n      return login;\n    }()\n  }, {\n    key: \"register\",\n    value: function () {\n      var _register = _asyncToGenerator(function* (userData) {\n        return yield apiClient.post('/auth/register', userData);\n      });\n      function register(_x3) {\n        return _register.apply(this, arguments);\n      }\n      return register;\n    }()\n  }, {\n    key: \"getCurrentUser\",\n    value: function () {\n      var _getCurrentUser = _asyncToGenerator(function* (token) {\n        return yield apiClient.get('/auth/me');\n      });\n      function getCurrentUser(_x4) {\n        return _getCurrentUser.apply(this, arguments);\n      }\n      return getCurrentUser;\n    }()\n  }, {\n    key: \"logout\",\n    value: function () {\n      var _logout = _asyncToGenerator(function* () {\n        return yield apiClient.post('/auth/logout');\n      });\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n      return logout;\n    }()\n  }, {\n    key: \"forgotPassword\",\n    value: function () {\n      var _forgotPassword = _asyncToGenerator(function* (email) {\n        return yield apiClient.post('/auth/forgot-password', {\n          email: email\n        });\n      });\n      function forgotPassword(_x5) {\n        return _forgotPassword.apply(this, arguments);\n      }\n      return forgotPassword;\n    }()\n  }, {\n    key: \"resetPassword\",\n    value: function () {\n      var _resetPassword = _asyncToGenerator(function* (token, newPassword) {\n        return yield apiClient.post('/auth/reset-password', {\n          token: token,\n          password: newPassword\n        });\n      });\n      function resetPassword(_x6, _x7) {\n        return _resetPassword.apply(this, arguments);\n      }\n      return resetPassword;\n    }()\n  }]);\n}();","map":{"version":3,"names":["apiClient","AuthService","_classCallCheck","_createClass","key","value","_login","_asyncToGenerator","email","password","post","login","_x","_x2","apply","arguments","_register","userData","register","_x3","_getCurrentUser","token","get","getCurrentUser","_x4","_logout","logout","_forgotPassword","forgotPassword","_x5","_resetPassword","newPassword","resetPassword","_x6","_x7"],"sources":["/workspaces/telemedicine-platform/mobile-app/src/services/AuthService.ts"],"sourcesContent":["import { apiClient } from './ApiClient';\n\nexport class AuthService {\n  static async login(email: string, password: string) {\n    return await apiClient.post('/auth/login', {\n      email,\n      password,\n    });\n  }\n\n  static async register(userData: {\n    email: string;\n    password: string;\n    role: string;\n    profile: {\n      firstName: string;\n      lastName: string;\n    };\n  }) {\n    return await apiClient.post('/auth/register', userData);\n  }\n\n  static async getCurrentUser(token?: string) {\n    return await apiClient.get('/auth/me');\n  }\n\n  static async logout() {\n    // If you have a logout endpoint on your backend\n    return await apiClient.post('/auth/logout');\n  }\n\n  static async forgotPassword(email: string) {\n    return await apiClient.post('/auth/forgot-password', { email });\n  }\n\n  static async resetPassword(token: string, newPassword: string) {\n    return await apiClient.post('/auth/reset-password', {\n      token,\n      password: newPassword,\n    });\n  }\n}\n"],"mappings":";;;AAAA,SAASA,SAAS;AAElB,WAAaC,WAAW;EAAA,SAAAA,YAAA;IAAAC,eAAA,OAAAD,WAAA;EAAA;EAAA,OAAAE,YAAA,CAAAF,WAAA;IAAAG,GAAA;IAAAC,KAAA;MAAA,IAAAC,MAAA,GAAAC,iBAAA,CACtB,WAAmBC,KAAa,EAAEC,QAAgB,EAAE;QAClD,aAAaT,SAAS,CAACU,IAAI,CAAC,aAAa,EAAE;UACzCF,KAAK,EAALA,KAAK;UACLC,QAAQ,EAARA;QACF,CAAC,CAAC;MACJ,CAAC;MAAA,SALYE,KAAKA,CAAAC,EAAA,EAAAC,GAAA;QAAA,OAAAP,MAAA,CAAAQ,KAAA,OAAAC,SAAA;MAAA;MAAA,OAALJ,KAAK;IAAA;EAAA;IAAAP,GAAA;IAAAC,KAAA;MAAA,IAAAW,SAAA,GAAAT,iBAAA,CAOlB,WAAsBU,QAQrB,EAAE;QACD,aAAajB,SAAS,CAACU,IAAI,CAAC,gBAAgB,EAAEO,QAAQ,CAAC;MACzD,CAAC;MAAA,SAVYC,QAAQA,CAAAC,GAAA;QAAA,OAAAH,SAAA,CAAAF,KAAA,OAAAC,SAAA;MAAA;MAAA,OAARG,QAAQ;IAAA;EAAA;IAAAd,GAAA;IAAAC,KAAA;MAAA,IAAAe,eAAA,GAAAb,iBAAA,CAYrB,WAA4Bc,KAAc,EAAE;QAC1C,aAAarB,SAAS,CAACsB,GAAG,CAAC,UAAU,CAAC;MACxC,CAAC;MAAA,SAFYC,cAAcA,CAAAC,GAAA;QAAA,OAAAJ,eAAA,CAAAN,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAdQ,cAAc;IAAA;EAAA;IAAAnB,GAAA;IAAAC,KAAA;MAAA,IAAAoB,OAAA,GAAAlB,iBAAA,CAI3B,aAAsB;QAEpB,aAAaP,SAAS,CAACU,IAAI,CAAC,cAAc,CAAC;MAC7C,CAAC;MAAA,SAHYgB,MAAMA,CAAA;QAAA,OAAAD,OAAA,CAAAX,KAAA,OAAAC,SAAA;MAAA;MAAA,OAANW,MAAM;IAAA;EAAA;IAAAtB,GAAA;IAAAC,KAAA;MAAA,IAAAsB,eAAA,GAAApB,iBAAA,CAKnB,WAA4BC,KAAa,EAAE;QACzC,aAAaR,SAAS,CAACU,IAAI,CAAC,uBAAuB,EAAE;UAAEF,KAAK,EAALA;QAAM,CAAC,CAAC;MACjE,CAAC;MAAA,SAFYoB,cAAcA,CAAAC,GAAA;QAAA,OAAAF,eAAA,CAAAb,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAda,cAAc;IAAA;EAAA;IAAAxB,GAAA;IAAAC,KAAA;MAAA,IAAAyB,cAAA,GAAAvB,iBAAA,CAI3B,WAA2Bc,KAAa,EAAEU,WAAmB,EAAE;QAC7D,aAAa/B,SAAS,CAACU,IAAI,CAAC,sBAAsB,EAAE;UAClDW,KAAK,EAALA,KAAK;UACLZ,QAAQ,EAAEsB;QACZ,CAAC,CAAC;MACJ,CAAC;MAAA,SALYC,aAAaA,CAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAJ,cAAA,CAAAhB,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAbiB,aAAa;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}