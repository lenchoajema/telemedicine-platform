{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar WebRTCModule = NativeModules.WebRTCModule;\nif (WebRTCModule === null) {\n  throw new Error(`WebRTC native module not found.\\n${Platform.OS === 'ios' ? 'Try executing the \"pod install\" command inside your projects ios folder.' : 'Try executing the \"npm install\" command inside your projects folder.'}`);\n}\nimport { setupNativeEvents } from \"./EventEmitter\";\nimport Logger from \"./Logger\";\nimport mediaDevices from \"./MediaDevices\";\nimport MediaStream from \"./MediaStream\";\nimport MediaStreamTrack from \"./MediaStreamTrack\";\nimport MediaStreamTrackEvent from \"./MediaStreamTrackEvent\";\nimport permissions from \"./Permissions\";\nimport RTCErrorEvent from \"./RTCErrorEvent\";\nimport RTCIceCandidate from \"./RTCIceCandidate\";\nimport RTCPeerConnection from \"./RTCPeerConnection\";\nimport RTCRtpReceiver from \"./RTCRtpReceiver\";\nimport RTCRtpSender from \"./RTCRtpSender\";\nimport RTCRtpTransceiver from \"./RTCRtpTransceiver\";\nimport RTCSessionDescription from \"./RTCSessionDescription\";\nimport RTCView from \"./RTCView\";\nimport ScreenCapturePickerView from \"./ScreenCapturePickerView\";\nLogger.enable(`${Logger.ROOT_PREFIX}:*`);\nsetupNativeEvents();\nexport { RTCIceCandidate, RTCPeerConnection, RTCSessionDescription, RTCView, ScreenCapturePickerView, RTCRtpTransceiver, RTCRtpReceiver, RTCRtpSender, RTCErrorEvent, MediaStream, MediaStreamTrack, mediaDevices, permissions, registerGlobals };\nfunction registerGlobals() {\n  if (typeof global.navigator !== 'object') {\n    throw new Error('navigator is not an object');\n  }\n  if (!global.navigator.mediaDevices) {\n    global.navigator.mediaDevices = {};\n  }\n  global.navigator.mediaDevices.getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n  global.navigator.mediaDevices.getDisplayMedia = mediaDevices.getDisplayMedia.bind(mediaDevices);\n  global.navigator.mediaDevices.enumerateDevices = mediaDevices.enumerateDevices.bind(mediaDevices);\n  global.RTCIceCandidate = RTCIceCandidate;\n  global.RTCPeerConnection = RTCPeerConnection;\n  global.RTCRtpReceiver = RTCRtpReceiver;\n  global.RTCRtpSender = RTCRtpReceiver;\n  global.RTCSessionDescription = RTCSessionDescription;\n  global.MediaStream = MediaStream;\n  global.MediaStreamTrack = MediaStreamTrack;\n  global.MediaStreamTrackEvent = MediaStreamTrackEvent;\n  global.RTCRtpTransceiver = RTCRtpTransceiver;\n  global.RTCRtpReceiver = RTCRtpReceiver;\n  global.RTCRtpSender = RTCRtpSender;\n  global.RTCErrorEvent = RTCErrorEvent;\n}","map":{"version":3,"names":["WebRTCModule","NativeModules","Error","Platform","OS","setupNativeEvents","Logger","mediaDevices","MediaStream","MediaStreamTrack","MediaStreamTrackEvent","permissions","RTCErrorEvent","RTCIceCandidate","RTCPeerConnection","RTCRtpReceiver","RTCRtpSender","RTCRtpTransceiver","RTCSessionDescription","RTCView","ScreenCapturePickerView","enable","ROOT_PREFIX","registerGlobals","global","navigator","getUserMedia","bind","getDisplayMedia","enumerateDevices"],"sources":["/workspaces/telemedicine-platform/mobile-app/node_modules/react-native-webrtc/src/index.ts"],"sourcesContent":["import { NativeModules, Platform } from 'react-native';\nconst { WebRTCModule } = NativeModules;\n\nif (WebRTCModule === null) {\n    throw new Error(`WebRTC native module not found.\\n${Platform.OS === 'ios' ?\n        'Try executing the \"pod install\" command inside your projects ios folder.' :\n        'Try executing the \"npm install\" command inside your projects folder.'\n    }`);\n}\n\nimport { setupNativeEvents } from './EventEmitter';\nimport Logger from './Logger';\nimport mediaDevices from './MediaDevices';\nimport MediaStream from './MediaStream';\nimport MediaStreamTrack from './MediaStreamTrack';\nimport MediaStreamTrackEvent from './MediaStreamTrackEvent';\nimport permissions from './Permissions';\nimport RTCErrorEvent from './RTCErrorEvent';\nimport RTCIceCandidate from './RTCIceCandidate';\nimport RTCPeerConnection from './RTCPeerConnection';\nimport RTCRtpReceiver from './RTCRtpReceiver';\nimport RTCRtpSender from './RTCRtpSender';\nimport RTCRtpTransceiver from './RTCRtpTransceiver';\nimport RTCSessionDescription from './RTCSessionDescription';\nimport RTCView from './RTCView';\nimport ScreenCapturePickerView from './ScreenCapturePickerView';\n\nLogger.enable(`${Logger.ROOT_PREFIX}:*`);\n\n// Add listeners for the native events early, since they are added asynchronously.\nsetupNativeEvents();\n\nexport {\n    RTCIceCandidate,\n    RTCPeerConnection,\n    RTCSessionDescription,\n    RTCView,\n    ScreenCapturePickerView,\n    RTCRtpTransceiver,\n    RTCRtpReceiver,\n    RTCRtpSender,\n    RTCErrorEvent,\n    MediaStream,\n    MediaStreamTrack,\n    mediaDevices,\n    permissions,\n    registerGlobals\n};\n\ndeclare const global: any;\n\nfunction registerGlobals(): void {\n    // Should not happen. React Native has a global navigator object.\n    if (typeof global.navigator !== 'object') {\n        throw new Error('navigator is not an object');\n    }\n\n    if (!global.navigator.mediaDevices) {\n        global.navigator.mediaDevices = {};\n    }\n\n    global.navigator.mediaDevices.getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    global.navigator.mediaDevices.getDisplayMedia = mediaDevices.getDisplayMedia.bind(mediaDevices);\n    global.navigator.mediaDevices.enumerateDevices = mediaDevices.enumerateDevices.bind(mediaDevices);\n\n    global.RTCIceCandidate = RTCIceCandidate;\n    global.RTCPeerConnection = RTCPeerConnection;\n    global.RTCRtpReceiver = RTCRtpReceiver;\n    global.RTCRtpSender = RTCRtpReceiver;\n    global.RTCSessionDescription = RTCSessionDescription;\n    global.MediaStream = MediaStream;\n    global.MediaStreamTrack = MediaStreamTrack;\n    global.MediaStreamTrackEvent = MediaStreamTrackEvent;\n    global.RTCRtpTransceiver = RTCRtpTransceiver;\n    global.RTCRtpReceiver = RTCRtpReceiver;\n    global.RTCRtpSender = RTCRtpSender;\n    global.RTCErrorEvent = RTCErrorEvent;\n}\n"],"mappings":";;AACA,IAAQA,YAAA,GAAiBC,aAAa,CAA9BD,YAAA;AAER,IAAIA,YAAY,KAAK,IAAI,EAAE;EACvB,MAAM,IAAIE,KAAK,CAAE,oCAAmCC,QAAQ,CAACC,EAAE,KAAK,KAAK,GACrE,0EAA0E,GAC1E,sEACH,EAAC,CAAC;AACP;AAEA,SAASC,iBAAiB;AAC1B,OAAOC,MAAM;AACb,OAAOC,YAAY;AACnB,OAAOC,WAAW;AAClB,OAAOC,gBAAgB;AACvB,OAAOC,qBAAqB;AAC5B,OAAOC,WAAW;AAClB,OAAOC,aAAa;AACpB,OAAOC,eAAe;AACtB,OAAOC,iBAAiB;AACxB,OAAOC,cAAc;AACrB,OAAOC,YAAY;AACnB,OAAOC,iBAAiB;AACxB,OAAOC,qBAAqB;AAC5B,OAAOC,OAAO;AACd,OAAOC,uBAAuB;AAE9Bd,MAAM,CAACe,MAAM,CAAE,GAAEf,MAAM,CAACgB,WAAY,IAAG,CAAC;AAGxCjB,iBAAiB,CAAC,CAAC;AAEnB,SACIQ,eAAe,EACfC,iBAAiB,EACjBI,qBAAqB,EACrBC,OAAO,EACPC,uBAAuB,EACvBH,iBAAiB,EACjBF,cAAc,EACdC,YAAY,EACZJ,aAAa,EACbJ,WAAW,EACXC,gBAAgB,EAChBF,YAAY,EACZI,WAAW,EACXY,eAAe;AAKnB,SAASA,eAAeA,CAAA,EAAS;EAE7B,IAAI,OAAOC,MAAM,CAACC,SAAS,KAAK,QAAQ,EAAE;IACtC,MAAM,IAAIvB,KAAK,CAAC,4BAA4B,CAAC;EACjD;EAEA,IAAI,CAACsB,MAAM,CAACC,SAAS,CAAClB,YAAY,EAAE;IAChCiB,MAAM,CAACC,SAAS,CAAClB,YAAY,GAAG,CAAC,CAAC;EACtC;EAEAiB,MAAM,CAACC,SAAS,CAAClB,YAAY,CAACmB,YAAY,GAAGnB,YAAY,CAACmB,YAAY,CAACC,IAAI,CAACpB,YAAY,CAAC;EACzFiB,MAAM,CAACC,SAAS,CAAClB,YAAY,CAACqB,eAAe,GAAGrB,YAAY,CAACqB,eAAe,CAACD,IAAI,CAACpB,YAAY,CAAC;EAC/FiB,MAAM,CAACC,SAAS,CAAClB,YAAY,CAACsB,gBAAgB,GAAGtB,YAAY,CAACsB,gBAAgB,CAACF,IAAI,CAACpB,YAAY,CAAC;EAEjGiB,MAAM,CAACX,eAAe,GAAGA,eAAe;EACxCW,MAAM,CAACV,iBAAiB,GAAGA,iBAAiB;EAC5CU,MAAM,CAACT,cAAc,GAAGA,cAAc;EACtCS,MAAM,CAACR,YAAY,GAAGD,cAAc;EACpCS,MAAM,CAACN,qBAAqB,GAAGA,qBAAqB;EACpDM,MAAM,CAAChB,WAAW,GAAGA,WAAW;EAChCgB,MAAM,CAACf,gBAAgB,GAAGA,gBAAgB;EAC1Ce,MAAM,CAACd,qBAAqB,GAAGA,qBAAqB;EACpDc,MAAM,CAACP,iBAAiB,GAAGA,iBAAiB;EAC5CO,MAAM,CAACT,cAAc,GAAGA,cAAc;EACtCS,MAAM,CAACR,YAAY,GAAGA,YAAY;EAClCQ,MAAM,CAACZ,aAAa,GAAGA,aAAa;AACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}