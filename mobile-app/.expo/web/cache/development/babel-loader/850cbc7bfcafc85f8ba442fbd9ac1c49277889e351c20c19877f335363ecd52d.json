{"ast":null,"code":"import { CodedError, UnavailabilityError } from 'expo-modules-core';\nimport ExpoFontLoader from \"./ExpoFontLoader\";\nimport { FontDisplay } from \"./Font.types\";\nimport { getAssetForSource, loadSingleFontAsync, fontFamilyNeedsScoping, getNativeFontName } from \"./FontLoader\";\nconst loaded = {};\nconst loadPromises = {};\nexport function processFontFamily(fontFamily) {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(`You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`);\n      } else {\n        console.error(`fontFamily \"${fontFamily}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`);\n      }\n    }\n    return 'System';\n  }\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\nexport function isLoaded(fontFamily) {\n  return fontFamily in loaded;\n}\nexport function isLoading(fontFamily) {\n  return fontFamily in loadPromises;\n}\nexport async function loadAsync(fontFamilyOrFontMap, source) {\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      throw new CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => loadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n  return await loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\nasync function loadFontInNamespaceAsync(fontFamily, source) {\n  if (!source) {\n    throw new CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n  }\n  if (loaded[fontFamily]) {\n    return;\n  }\n  if (loadPromises.hasOwnProperty(fontFamily)) {\n    return loadPromises[fontFamily];\n  }\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n  await loadPromises[fontFamily];\n}\nexport async function unloadAllAsync() {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`);\n  }\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n  await ExpoFontLoader.unloadAllAsync();\n}\nexport async function unloadAsync(fontFamilyOrFontMap, options) {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\nasync function unloadFontInNamespaceAsync(fontFamily, options) {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n  const nativeFontName = getNativeFontName(fontFamily);\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\nexport { FontDisplay };","map":{"version":3,"names":["CodedError","UnavailabilityError","ExpoFontLoader","FontDisplay","getAssetForSource","loadSingleFontAsync","fontFamilyNeedsScoping","getNativeFontName","loaded","loadPromises","processFontFamily","fontFamily","isLoaded","__DEV__","isLoading","console","error","loadAsync","fontFamilyOrFontMap","source","fontMap","names","Object","keys","Promise","all","map","name","loadFontInNamespaceAsync","hasOwnProperty","asset","unloadAllAsync","length","join","unloadAsync","options","unloadFontInNamespaceAsync","nativeFontName"],"sources":["/workspaces/telemedicine-platform/mobile-app/node_modules/expo-font/src/Font.ts"],"sourcesContent":["import { CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\n\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\n// @needsAudit\n// note(brentvatne): at some point we may want to warn if this is called outside of a managed app.\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n *\n * @param fontFamily Name of font to process.\n * @returns Returns a name processed for use with the [current workflow](https://docs.expo.dev/archive/managed-vs-bare/).\n */\nexport function processFontFamily(fontFamily: string | null): string | null {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(\n          `You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${fontFamily}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @return Returns `true` if the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  return fontFamily in loaded;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @returns Returns `true` if the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n// @needsAudit\n/**\n * Highly efficient method for loading fonts from static or remote resources which can then be used\n * with the platform's native text elements. In the browser this generates a `@font-face` block in\n * a shared style sheet for fonts. No CSS is needed to use this method.\n *\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style)\n * style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n *\n * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n */\nexport async function loadAsync(\n  fontFamilyOrFontMap: string | Record<string, FontSource>,\n  source?: FontSource\n): Promise<void> {\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => loadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  if (loaded[fontFamily]) {\n    return;\n  }\n\n  if (loadPromises.hasOwnProperty(fontFamily)) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n// @needsAudit\n/**\n * Unloads all the custom fonts. This is used for testing.\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n// @needsAudit\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n * the custom font originally.\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | Record<string, UnloadFontOptions>,\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions | null\n): Promise<void> {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const nativeFontName = getNativeFontName(fontFamily);\n\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}