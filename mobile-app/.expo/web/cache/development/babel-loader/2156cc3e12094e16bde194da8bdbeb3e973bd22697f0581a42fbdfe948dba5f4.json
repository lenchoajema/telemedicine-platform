{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { DEFAULT_AUDIO_CAPABILITIES, receiverCapabilities } from \"./RTCRtpCapabilities\";\nimport RTCRtpReceiveParameters from \"./RTCRtpReceiveParameters\";\nvar WebRTCModule = NativeModules.WebRTCModule;\nvar RTCRtpReceiver = function () {\n  function RTCRtpReceiver(info) {\n    _classCallCheck(this, RTCRtpReceiver);\n    this._track = null;\n    this._id = info.id;\n    this._peerConnectionId = info.peerConnectionId;\n    this._rtpParameters = new RTCRtpReceiveParameters(info.rtpParameters);\n    if (info.track) {\n      this._track = info.track;\n    }\n  }\n  return _createClass(RTCRtpReceiver, [{\n    key: \"getStats\",\n    value: function getStats() {\n      return WebRTCModule.receiverGetStats(this._peerConnectionId, this._id).then(function (data) {\n        return (new Map(JSON.parse(data))\n        );\n      });\n    }\n  }, {\n    key: \"getParameters\",\n    value: function getParameters() {\n      return this._rtpParameters;\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    }\n  }, {\n    key: \"track\",\n    get: function get() {\n      return this._track;\n    }\n  }], [{\n    key: \"getCapabilities\",\n    value: function getCapabilities(kind) {\n      if (kind === 'audio') {\n        return DEFAULT_AUDIO_CAPABILITIES;\n      }\n      if (!receiverCapabilities) {\n        throw new Error('Receiver Capabilities is null');\n      }\n      return receiverCapabilities;\n    }\n  }]);\n}();\nexport { RTCRtpReceiver as default };","map":{"version":3,"names":["DEFAULT_AUDIO_CAPABILITIES","receiverCapabilities","RTCRtpReceiveParameters","WebRTCModule","NativeModules","RTCRtpReceiver","info","_classCallCheck","_track","_id","id","_peerConnectionId","peerConnectionId","_rtpParameters","rtpParameters","track","_createClass","key","value","getStats","receiverGetStats","then","data","Map","JSON","parse","getParameters","get","getCapabilities","kind","Error","default"],"sources":["/workspaces/telemedicine-platform/mobile-app/node_modules/react-native-webrtc/src/RTCRtpReceiver.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\n\nimport MediaStreamTrack from './MediaStreamTrack';\nimport RTCRtpCapabilities, { DEFAULT_AUDIO_CAPABILITIES, receiverCapabilities } from './RTCRtpCapabilities';\nimport { RTCRtpParametersInit } from './RTCRtpParameters';\nimport RTCRtpReceiveParameters from './RTCRtpReceiveParameters';\n\nconst { WebRTCModule } = NativeModules;\n\nexport default class RTCRtpReceiver {\n    _id: string;\n    _peerConnectionId: number;\n    _track: MediaStreamTrack | null = null;\n    _rtpParameters: RTCRtpReceiveParameters;\n\n    constructor(info: {\n        peerConnectionId: number,\n        id: string,\n        track?: MediaStreamTrack,\n        rtpParameters: RTCRtpParametersInit\n    }) {\n        this._id = info.id;\n        this._peerConnectionId = info.peerConnectionId;\n        this._rtpParameters = new RTCRtpReceiveParameters(info.rtpParameters);\n\n        if (info.track) {\n            this._track = info.track;\n        }\n    }\n\n    static getCapabilities(kind: 'audio' | 'video'): RTCRtpCapabilities {\n        if (kind === 'audio') {\n            return DEFAULT_AUDIO_CAPABILITIES;\n        }\n\n        if (!receiverCapabilities) {\n            throw new Error('Receiver Capabilities is null');\n        }\n\n        return receiverCapabilities;\n    }\n\n    getStats() {\n        return WebRTCModule.receiverGetStats(this._peerConnectionId, this._id).then(data =>\n            /* On both Android and iOS it is faster to construct a single\n            JSON string representing the Map of StatsReports and have it\n            pass through the React Native bridge rather than the Map of\n            StatsReports. While the implementations do try to be faster in\n            general, the stress is on being faster to pass through the React\n            Native bridge which is a bottleneck that tends to be visible in\n            the UI when there is congestion involving UI-related passing.\n            */\n            new Map(JSON.parse(data))\n        );\n    }\n\n    getParameters(): RTCRtpReceiveParameters {\n        return this._rtpParameters;\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    get track() {\n        return this._track;\n    }\n}\n"],"mappings":";;;AAGA,SAA6BA,0BAA0B,EAAEC,oBAAoB;AAE7E,OAAOC,uBAAuB;AAE9B,IAAQC,YAAA,GAAiBC,aAAa,CAA9BD,YAAA;AAA8B,IAEjBE,cAAc;EAM/B,SAAAA,eAAYC,IAKX,EAAE;IAAAC,eAAA,OAAAF,cAAA;IAAA,KARHG,MAAM,GAA4B,IAAI;IASlC,IAAI,CAACC,GAAG,GAAGH,IAAI,CAACI,EAAE;IAClB,IAAI,CAACC,iBAAiB,GAAGL,IAAI,CAACM,gBAAgB;IAC9C,IAAI,CAACC,cAAc,GAAG,IAAIX,uBAAuB,CAACI,IAAI,CAACQ,aAAa,CAAC;IAErE,IAAIR,IAAI,CAACS,KAAK,EAAE;MACZ,IAAI,CAACP,MAAM,GAAGF,IAAI,CAACS,KAAK;IAC5B;EACJ;EAAA,OAAAC,YAAA,CAAAX,cAAA;IAAAY,GAAA;IAAAC,KAAA,EAcA,SAAAC,QAAQA,CAAA,EAAG;MACP,OAAOhB,YAAY,CAACiB,gBAAgB,CAAC,IAAI,CAACT,iBAAiB,EAAE,IAAI,CAACF,GAAG,CAAC,CAACY,IAAI,CAAC,UAAAC,IAAI;QAAA,QAS5E,IAAIC,GAAG,CAACC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;QAC5B;MAAA,EAAC;IACL;EAAA;IAAAL,GAAA;IAAAC,KAAA,EAEA,SAAAQ,aAAaA,CAAA,EAA4B;MACrC,OAAO,IAAI,CAACb,cAAc;IAC9B;EAAA;IAAAI,GAAA;IAAAU,GAAA,EAEA,SAAAA,IAAA,EAAS;MACL,OAAO,IAAI,CAAClB,GAAG;IACnB;EAAA;IAAAQ,GAAA;IAAAU,GAAA,EAEA,SAAAA,IAAA,EAAY;MACR,OAAO,IAAI,CAACnB,MAAM;IACtB;EAAA;IAAAS,GAAA;IAAAC,KAAA,EApCA,SAAOU,eAAeA,CAACC,IAAuB,EAAsB;MAChE,IAAIA,IAAI,KAAK,OAAO,EAAE;QAClB,OAAO7B,0BAA0B;MACrC;MAEA,IAAI,CAACC,oBAAoB,EAAE;QACvB,MAAM,IAAI6B,KAAK,CAAC,+BAA+B,CAAC;MACpD;MAEA,OAAO7B,oBAAoB;IAC/B;EAAA;AAAA;AAAA,SA/BiBI,cAAc,IAAA0B,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}