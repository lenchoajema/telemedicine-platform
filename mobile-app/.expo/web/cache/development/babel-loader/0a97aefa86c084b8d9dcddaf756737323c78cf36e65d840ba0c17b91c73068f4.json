{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport { EventTarget, Event, defineEventAttribute } from 'event-target-shim';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { addListener, removeListener } from \"./EventEmitter\";\nimport Logger from \"./Logger\";\nimport { deepClone } from \"./RTCUtil\";\nvar log = new Logger('pc');\nvar WebRTCModule = NativeModules.WebRTCModule;\nvar MediaStreamTrack = function (_EventTarget) {\n  function MediaStreamTrack(info) {\n    var _this;\n    _classCallCheck(this, MediaStreamTrack);\n    _this = _callSuper(this, MediaStreamTrack);\n    _this.label = '';\n    _this._constraints = info.constraints || {};\n    _this._enabled = info.enabled;\n    _this._settings = info.settings || {};\n    _this._muted = false;\n    _this._peerConnectionId = info.peerConnectionId;\n    _this._readyState = info.readyState;\n    _this.id = info.id;\n    _this.kind = info.kind;\n    _this.remote = info.remote;\n    if (!_this.remote) {\n      _this._registerEvents();\n    }\n    return _this;\n  }\n  _inherits(MediaStreamTrack, _EventTarget);\n  return _createClass(MediaStreamTrack, [{\n    key: \"enabled\",\n    get: function get() {\n      return this._enabled;\n    },\n    set: function set(enabled) {\n      if (enabled === this._enabled) {\n        return;\n      }\n      this._enabled = Boolean(enabled);\n      if (this._readyState === 'ended') {\n        return;\n      }\n      WebRTCModule.mediaStreamTrackSetEnabled(this.remote ? this._peerConnectionId : -1, this.id, this._enabled);\n    }\n  }, {\n    key: \"muted\",\n    get: function get() {\n      return this._muted;\n    }\n  }, {\n    key: \"readyState\",\n    get: function get() {\n      return this._readyState;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.enabled = false;\n      this._readyState = 'ended';\n    }\n  }, {\n    key: \"_switchCamera\",\n    value: function _switchCamera() {\n      if (this.remote) {\n        throw new Error('Not implemented for remote tracks');\n      }\n      if (this.kind !== 'video') {\n        throw new Error('Only implemented for video tracks');\n      }\n      WebRTCModule.mediaStreamTrackSwitchCamera(this.id);\n    }\n  }, {\n    key: \"_setVideoEffect\",\n    value: function _setVideoEffect(name) {\n      if (this.remote) {\n        throw new Error('Not implemented for remote tracks');\n      }\n      if (this.kind !== 'video') {\n        throw new Error('Only implemented for video tracks');\n      }\n      WebRTCModule.mediaStreamTrackSetVideoEffect(this.id, name);\n    }\n  }, {\n    key: \"_setMutedInternal\",\n    value: function _setMutedInternal(muted) {\n      if (!this.remote) {\n        throw new Error('Track is not remote!');\n      }\n      this._muted = muted;\n      this.dispatchEvent(new Event(muted ? 'mute' : 'unmute'));\n    }\n  }, {\n    key: \"_setVolume\",\n    value: function _setVolume(volume) {\n      if (this.kind !== 'audio') {\n        throw new Error('Only implemented for audio tracks');\n      }\n      WebRTCModule.mediaStreamTrackSetVolume(this.remote ? this._peerConnectionId : -1, this.id, volume);\n    }\n  }, {\n    key: \"applyConstraints\",\n    value: function applyConstraints() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"getCapabilities\",\n    value: function getCapabilities() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"getConstraints\",\n    value: function getConstraints() {\n      return deepClone(this._constraints);\n    }\n  }, {\n    key: \"getSettings\",\n    value: function getSettings() {\n      return deepClone(this._settings);\n    }\n  }, {\n    key: \"_registerEvents\",\n    value: function _registerEvents() {\n      var _this2 = this;\n      addListener(this, 'mediaStreamTrackEnded', function (ev) {\n        if (ev.trackId !== _this2.id || _this2._readyState === 'ended') {\n          return;\n        }\n        log.debug(`${_this2.id} mediaStreamTrackEnded`);\n        _this2._readyState = 'ended';\n        _this2.dispatchEvent(new Event('ended'));\n      });\n    }\n  }, {\n    key: \"release\",\n    value: function release() {\n      if (this.remote) {\n        return;\n      }\n      removeListener(this);\n      WebRTCModule.mediaStreamTrackRelease(this.id);\n    }\n  }]);\n}(EventTarget);\nexport { MediaStreamTrack as default };\nvar proto = MediaStreamTrack.prototype;\ndefineEventAttribute(proto, 'ended');\ndefineEventAttribute(proto, 'mute');\ndefineEventAttribute(proto, 'unmute');","map":{"version":3,"names":["EventTarget","Event","defineEventAttribute","NativeModules","addListener","removeListener","Logger","deepClone","log","WebRTCModule","MediaStreamTrack","_EventTarget","info","_this","_classCallCheck","_callSuper","label","_constraints","constraints","_enabled","enabled","_settings","settings","_muted","_peerConnectionId","peerConnectionId","_readyState","readyState","id","kind","remote","_registerEvents","_inherits","_createClass","key","get","set","Boolean","mediaStreamTrackSetEnabled","value","stop","_switchCamera","Error","mediaStreamTrackSwitchCamera","_setVideoEffect","name","mediaStreamTrackSetVideoEffect","_setMutedInternal","muted","dispatchEvent","_setVolume","volume","mediaStreamTrackSetVolume","applyConstraints","clone","getCapabilities","getConstraints","getSettings","_this2","ev","trackId","debug","release","mediaStreamTrackRelease","default","proto","prototype"],"sources":["/workspaces/telemedicine-platform/mobile-app/node_modules/react-native-webrtc/src/MediaStreamTrack.ts"],"sourcesContent":["import { EventTarget, Event, defineEventAttribute } from 'event-target-shim';\nimport { NativeModules } from 'react-native';\n\nimport { addListener, removeListener } from './EventEmitter';\nimport Logger from './Logger';\nimport { deepClone } from './RTCUtil';\n\nconst log = new Logger('pc');\nconst { WebRTCModule } = NativeModules;\n\n\ntype MediaStreamTrackState = 'live' | 'ended';\n\nexport type MediaStreamTrackInfo = {\n    id: string;\n    kind: string;\n    remote: boolean;\n    constraints: object;\n    enabled: boolean;\n    settings: object;\n    peerConnectionId: number;\n    readyState: MediaStreamTrackState;\n}\n\ntype MediaStreamTrackEventMap = {\n    ended: Event<'ended'>;\n    mute: Event<'mute'>;\n    unmute: Event<'unmute'>;\n}\n\nexport default class MediaStreamTrack extends EventTarget<MediaStreamTrackEventMap> {\n    _constraints: object;\n    _enabled: boolean;\n    _settings: object;\n    _muted: boolean;\n    _peerConnectionId: number;\n    _readyState: MediaStreamTrackState;\n\n    readonly id: string;\n    readonly kind: string;\n    readonly label: string = '';\n    readonly remote: boolean;\n\n    constructor(info: MediaStreamTrackInfo) {\n        super();\n\n        this._constraints = info.constraints || {};\n        this._enabled = info.enabled;\n        this._settings = info.settings || {};\n        this._muted = false;\n        this._peerConnectionId = info.peerConnectionId;\n        this._readyState = info.readyState;\n\n        this.id = info.id;\n        this.kind = info.kind;\n        this.remote = info.remote;\n\n        if (!this.remote) {\n            this._registerEvents();\n        }\n    }\n\n    get enabled(): boolean {\n        return this._enabled;\n    }\n\n    set enabled(enabled: boolean) {\n        if (enabled === this._enabled) {\n            return;\n        }\n\n        this._enabled = Boolean(enabled);\n\n        if (this._readyState === 'ended') {\n            return;\n        }\n\n        WebRTCModule.mediaStreamTrackSetEnabled(this.remote ? this._peerConnectionId : -1, this.id, this._enabled);\n    }\n\n    get muted(): boolean {\n        return this._muted;\n    }\n\n    get readyState(): string {\n        return this._readyState;\n    }\n\n    stop(): void {\n        this.enabled = false;\n        this._readyState = 'ended';\n    }\n\n    /**\n     * Private / custom API for switching the cameras on the fly, without the\n     * need for adding / removing tracks or doing any SDP renegotiation.\n     *\n     * This is how the reference application (AppRTCMobile) implements camera\n     * switching.\n     */\n    _switchCamera(): void {\n        if (this.remote) {\n            throw new Error('Not implemented for remote tracks');\n        }\n\n        if (this.kind !== 'video') {\n            throw new Error('Only implemented for video tracks');\n        }\n\n        WebRTCModule.mediaStreamTrackSwitchCamera(this.id);\n    }\n\n    _setVideoEffect(name:string) {\n        if (this.remote) {\n            throw new Error('Not implemented for remote tracks');\n        }\n\n        if (this.kind !== 'video') {\n            throw new Error('Only implemented for video tracks');\n        }\n\n        WebRTCModule.mediaStreamTrackSetVideoEffect(this.id, name);\n    }\n\n    /**\n     * Internal function which is used to set the muted state on remote tracks and\n     * emit the mute / unmute event.\n     *\n     * @param muted Whether the track should be marked as muted / unmuted.\n     */\n    _setMutedInternal(muted: boolean) {\n        if (!this.remote) {\n            throw new Error('Track is not remote!');\n        }\n\n        this._muted = muted;\n        this.dispatchEvent(new Event(muted ? 'mute' : 'unmute'));\n    }\n\n    /**\n     * Custom API for setting the volume on an individual audio track.\n     *\n     * @param volume a gain value in the range of 0-10. defaults to 1.0\n     */\n    _setVolume(volume: number) {\n        if (this.kind !== 'audio') {\n            throw new Error('Only implemented for audio tracks');\n        }\n\n        WebRTCModule.mediaStreamTrackSetVolume(this.remote ? this._peerConnectionId : -1, this.id, volume);\n    }\n\n    applyConstraints(): never {\n        throw new Error('Not implemented.');\n    }\n\n    clone(): never {\n        throw new Error('Not implemented.');\n    }\n\n    getCapabilities(): never {\n        throw new Error('Not implemented.');\n    }\n\n    getConstraints() {\n        return deepClone(this._constraints);\n    }\n\n    getSettings() {\n        return deepClone(this._settings);\n    }\n\n    _registerEvents(): void {\n        addListener(this, 'mediaStreamTrackEnded', (ev: any) => {\n            if (ev.trackId !== this.id || this._readyState === 'ended') {\n                return;\n            }\n\n            log.debug(`${this.id} mediaStreamTrackEnded`);\n            this._readyState = 'ended';\n\n            this.dispatchEvent(new Event('ended'));\n        });\n    }\n\n    release(): void {\n        if (this.remote) {\n            return;\n        }\n\n        removeListener(this);\n        WebRTCModule.mediaStreamTrackRelease(this.id);\n    }\n}\n\n/**\n * Define the `onxxx` event handlers.\n */\nconst proto = MediaStreamTrack.prototype;\n\ndefineEventAttribute(proto, 'ended');\ndefineEventAttribute(proto, 'mute');\ndefineEventAttribute(proto, 'unmute');\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}