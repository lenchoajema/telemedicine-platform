{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport { Event } from 'event-target-shim';\nvar MessageEvent = function (_Event) {\n  function MessageEvent(type, eventInitDict) {\n    var _this;\n    _classCallCheck(this, MessageEvent);\n    _this = _callSuper(this, MessageEvent, [type, eventInitDict]);\n    _this.data = eventInitDict.data;\n    return _this;\n  }\n  _inherits(MessageEvent, _Event);\n  return _createClass(MessageEvent);\n}(Event);\nexport { MessageEvent as default };","map":{"version":3,"names":["Event","MessageEvent","_Event","type","eventInitDict","_this","_classCallCheck","_callSuper","data","_inherits","_createClass","default"],"sources":["/workspaces/telemedicine-platform/mobile-app/node_modules/react-native-webrtc/src/MessageEvent.ts"],"sourcesContent":["import { Event } from 'event-target-shim';\nexport type MessageEventData = string | ArrayBuffer | Blob;\n\ntype MESSAGE_EVENTS = 'message' | 'messageerror';\n\ninterface IMessageEventInitDict extends Event.EventInit {\n    data: MessageEventData;\n}\n\n/**\n * @eventClass\n * This event is fired whenever the RTCDataChannel send message.\n * @param {MESSAGE_EVENTS} type - The type of event.\n * @param {IMessageEventInitDict} eventInitDict - The event init properties.\n * @see\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/message_event#event_type MDN} for details.\n */\nexport default class MessageEvent<TEventType extends MESSAGE_EVENTS> extends Event<TEventType> {\n    /** @eventProperty */\n    data: MessageEventData;\n    constructor(type: TEventType, eventInitDict: IMessageEventInitDict) {\n        super(type, eventInitDict);\n        this.data = eventInitDict.data;\n    }\n}\n"],"mappings":";;;;;;;AAAA,SAASA,KAAK,QAAQ,mBAAmB;AAAA,IAiBpBC,YAAY,aAAAC,MAAA;EAG7B,SAAAD,aAAYE,IAAgB,EAAEC,aAAoC,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAL,YAAA;IAChEI,KAAA,GAAAE,UAAA,OAAAN,YAAA,GAAME,IAAI,EAAEC,aAAa;IACzBC,KAAA,CAAKG,IAAI,GAAGJ,aAAa,CAACI,IAAI;IAAA,OAAAH,KAAA;EAClC;EAAAI,SAAA,CAAAR,YAAA,EAAAC,MAAA;EAAA,OAAAQ,YAAA,CAAAT,YAAA;AAAA,EANyED,KAAK;AAAA,SAA7DC,YAAY,IAAAU,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}