{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport RTCRtcpParameters from \"./RTCRtcpParameters\";\nimport RTCRtpCodecParameters from \"./RTCRtpCodecParameters\";\nimport RTCRtpHeaderExtension from \"./RTCRtpHeaderExtension\";\nvar RTCRtpParameters = function () {\n  function RTCRtpParameters(init) {\n    _classCallCheck(this, RTCRtpParameters);\n    this.codecs = [];\n    this.headerExtensions = [];\n    for (var codec of init.codecs) {\n      this.codecs.push(new RTCRtpCodecParameters(codec));\n    }\n    for (var ext of init.headerExtensions) {\n      this.headerExtensions.push(new RTCRtpHeaderExtension(ext));\n    }\n    this.rtcp = new RTCRtcpParameters(init.rtcp);\n  }\n  return _createClass(RTCRtpParameters, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        codecs: this.codecs.map(function (c) {\n          return c.toJSON();\n        }),\n        headerExtensions: this.headerExtensions.map(function (he) {\n          return he.toJSON();\n        }),\n        rtcp: this.rtcp.toJSON()\n      };\n    }\n  }]);\n}();\nexport { RTCRtpParameters as default };","map":{"version":3,"names":["RTCRtcpParameters","RTCRtpCodecParameters","RTCRtpHeaderExtension","RTCRtpParameters","init","_classCallCheck","codecs","headerExtensions","codec","push","ext","rtcp","_createClass","key","value","toJSON","map","c","he","default"],"sources":["/workspaces/telemedicine-platform/mobile-app/node_modules/react-native-webrtc/src/RTCRtpParameters.ts"],"sourcesContent":["import RTCRtcpParameters, { RTCRtcpParametersInit } from './RTCRtcpParameters';\nimport RTCRtpCodecParameters, { RTCRtpCodecParametersInit } from './RTCRtpCodecParameters';\nimport RTCRtpHeaderExtension, { RTCRtpHeaderExtensionInit } from './RTCRtpHeaderExtension';\n\n\nexport interface RTCRtpParametersInit {\n    codecs: RTCRtpCodecParametersInit[],\n    headerExtensions: RTCRtpHeaderExtensionInit[],\n    rtcp: RTCRtcpParametersInit\n}\n\nexport default class RTCRtpParameters {\n    readonly codecs: RTCRtpCodecParameters[] = [];\n    readonly headerExtensions: RTCRtpHeaderExtension[] = [];\n    readonly rtcp: RTCRtcpParameters;\n\n    constructor(init: RTCRtpParametersInit) {\n        for (const codec of init.codecs) {\n            this.codecs.push(new RTCRtpCodecParameters(codec));\n        }\n\n        for (const ext of init.headerExtensions) {\n            this.headerExtensions.push(new RTCRtpHeaderExtension(ext));\n        }\n\n        this.rtcp = new RTCRtcpParameters(init.rtcp);\n    }\n\n    toJSON(): RTCRtpParametersInit {\n        return {\n            codecs: this.codecs.map(c => c.toJSON()),\n            headerExtensions: this.headerExtensions.map(he => he.toJSON()),\n            rtcp: this.rtcp.toJSON()\n        };\n    }\n}\n"],"mappings":";;AAAA,OAAOA,iBAAiB;AACxB,OAAOC,qBAAqB;AAC5B,OAAOC,qBAAqB;AAA8D,IASrEC,gBAAgB;EAKjC,SAAAA,iBAAYC,IAA0B,EAAE;IAAAC,eAAA,OAAAF,gBAAA;IAAA,KAJ/BG,MAAM,GAA4B,EAAE;IAAA,KACpCC,gBAAgB,GAA4B,EAAE;IAInD,KAAK,IAAMC,KAAK,IAAIJ,IAAI,CAACE,MAAM,EAAE;MAC7B,IAAI,CAACA,MAAM,CAACG,IAAI,CAAC,IAAIR,qBAAqB,CAACO,KAAK,CAAC,CAAC;IACtD;IAEA,KAAK,IAAME,GAAG,IAAIN,IAAI,CAACG,gBAAgB,EAAE;MACrC,IAAI,CAACA,gBAAgB,CAACE,IAAI,CAAC,IAAIP,qBAAqB,CAACQ,GAAG,CAAC,CAAC;IAC9D;IAEA,IAAI,CAACC,IAAI,GAAG,IAAIX,iBAAiB,CAACI,IAAI,CAACO,IAAI,CAAC;EAChD;EAAA,OAAAC,YAAA,CAAAT,gBAAA;IAAAU,GAAA;IAAAC,KAAA,EAEA,SAAAC,MAAMA,CAAA,EAAyB;MAC3B,OAAO;QACHT,MAAM,EAAE,IAAI,CAACA,MAAM,CAACU,GAAG,CAAC,UAAAC,CAAC;UAAA,OAAIA,CAAC,CAACF,MAAM,CAAC,CAAC;QAAA,EAAC;QACxCR,gBAAgB,EAAE,IAAI,CAACA,gBAAgB,CAACS,GAAG,CAAC,UAAAE,EAAE;UAAA,OAAIA,EAAE,CAACH,MAAM,CAAC,CAAC;QAAA,EAAC;QAC9DJ,IAAI,EAAE,IAAI,CAACA,IAAI,CAACI,MAAM,CAAC;MAC3B,CAAC;IACL;EAAA;AAAA;AAAA,SAvBiBZ,gBAAgB,IAAAgB,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}