{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar RTCRtpEncodingParameters = function () {\n  function RTCRtpEncodingParameters(init) {\n    var _init$rid, _init$maxBitrate, _init$maxFramerate, _init$scaleResolution;\n    _classCallCheck(this, RTCRtpEncodingParameters);\n    this.active = init.active;\n    this._rid = (_init$rid = init.rid) != null ? _init$rid : null;\n    this._maxBitrate = (_init$maxBitrate = init.maxBitrate) != null ? _init$maxBitrate : null;\n    this._maxFramerate = (_init$maxFramerate = init.maxFramerate) != null ? _init$maxFramerate : null;\n    this._scaleResolutionDownBy = (_init$scaleResolution = init.scaleResolutionDownBy) != null ? _init$scaleResolution : null;\n  }\n  return _createClass(RTCRtpEncodingParameters, [{\n    key: \"rid\",\n    get: function get() {\n      return this._rid;\n    }\n  }, {\n    key: \"maxFramerate\",\n    get: function get() {\n      return this._maxFramerate;\n    },\n    set: function set(framerate) {\n      if (framerate != null && framerate > 0) {\n        this._maxFramerate = framerate;\n      } else {\n        this._maxFramerate = null;\n      }\n    }\n  }, {\n    key: \"maxBitrate\",\n    get: function get() {\n      return this._maxBitrate;\n    },\n    set: function set(bitrate) {\n      if (bitrate != null && bitrate >= 0) {\n        this._maxBitrate = bitrate;\n      } else {\n        this._maxBitrate = null;\n      }\n    }\n  }, {\n    key: \"scaleResolutionDownBy\",\n    get: function get() {\n      return this._scaleResolutionDownBy;\n    },\n    set: function set(resolutionScale) {\n      if (resolutionScale != null && resolutionScale >= 1) {\n        this._scaleResolutionDownBy = resolutionScale;\n      } else {\n        this._scaleResolutionDownBy = null;\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var obj = {\n        active: this.active\n      };\n      if (this._rid !== null) {\n        obj['rid'] = this._rid;\n      }\n      if (this._maxBitrate !== null) {\n        obj['maxBitrate'] = this._maxBitrate;\n      }\n      if (this._maxFramerate !== null) {\n        obj['maxFramerate'] = this._maxFramerate;\n      }\n      if (this._scaleResolutionDownBy !== null) {\n        obj['scaleResolutionDownBy'] = this._scaleResolutionDownBy;\n      }\n      return obj;\n    }\n  }]);\n}();\nexport { RTCRtpEncodingParameters as default };","map":{"version":3,"names":["RTCRtpEncodingParameters","init","_init$rid","_init$maxBitrate","_init$maxFramerate","_init$scaleResolution","_classCallCheck","active","_rid","rid","_maxBitrate","maxBitrate","_maxFramerate","maxFramerate","_scaleResolutionDownBy","scaleResolutionDownBy","_createClass","key","get","set","framerate","bitrate","resolutionScale","value","toJSON","obj","default"],"sources":["/workspaces/telemedicine-platform/mobile-app/node_modules/react-native-webrtc/src/RTCRtpEncodingParameters.ts"],"sourcesContent":["export interface RTCRtpEncodingParametersInit {\n    active: boolean,\n    rid?: string;\n    maxFramerate?: number;\n    maxBitrate?: number;\n    scaleResolutionDownBy?: number;\n}\n\nexport default class RTCRtpEncodingParameters {\n    active: boolean;\n    _rid: string | null;\n    _maxFramerate: number | null;\n    _maxBitrate: number | null;\n    _scaleResolutionDownBy: number | null;\n\n    constructor(init: RTCRtpEncodingParametersInit) {\n        this.active = init.active;\n        this._rid = init.rid ?? null;\n        this._maxBitrate = init.maxBitrate ?? null;\n        this._maxFramerate = init.maxFramerate ?? null;\n        this._scaleResolutionDownBy = init.scaleResolutionDownBy ?? null;\n    }\n\n    get rid() {\n        return this._rid;\n    }\n\n    get maxFramerate() {\n        return this._maxFramerate;\n    }\n\n    set maxFramerate(framerate) {\n        // eslint-disable-next-line eqeqeq\n        if (framerate != null && framerate > 0) {\n            this._maxFramerate = framerate;\n        } else {\n            this._maxFramerate = null;\n        }\n    }\n\n    get maxBitrate() {\n        return this._maxBitrate;\n    }\n\n    set maxBitrate(bitrate) {\n        // eslint-disable-next-line eqeqeq\n        if (bitrate != null && bitrate >= 0) {\n            this._maxBitrate = bitrate;\n        } else {\n            this._maxBitrate = null;\n        }\n    }\n\n    get scaleResolutionDownBy() {\n        return this._scaleResolutionDownBy;\n    }\n\n    set scaleResolutionDownBy(resolutionScale) {\n        // eslint-disable-next-line eqeqeq\n        if (resolutionScale != null && resolutionScale >= 1) {\n            this._scaleResolutionDownBy = resolutionScale;\n        } else {\n            this._scaleResolutionDownBy = null;\n        }\n    }\n\n    toJSON(): RTCRtpEncodingParametersInit {\n        const obj = {\n            active: this.active,\n        };\n\n        if (this._rid !== null) {\n            obj['rid'] = this._rid;\n        }\n\n        if (this._maxBitrate !== null) {\n            obj['maxBitrate'] = this._maxBitrate;\n        }\n\n        if (this._maxFramerate !== null) {\n            obj['maxFramerate'] = this._maxFramerate;\n        }\n\n        if (this._scaleResolutionDownBy !== null) {\n            obj['scaleResolutionDownBy'] = this._scaleResolutionDownBy;\n        }\n\n        return obj;\n    }\n}\n"],"mappings":";;IAQqBA,wBAAwB;EAOzC,SAAAA,yBAAYC,IAAkC,EAAE;IAAA,IAAAC,SAAA,EAAAC,gBAAA,EAAAC,kBAAA,EAAAC,qBAAA;IAAAC,eAAA,OAAAN,wBAAA;IAC5C,IAAI,CAACO,MAAM,GAAGN,IAAI,CAACM,MAAM;IACzB,IAAI,CAACC,IAAI,IAAAN,SAAA,GAAGD,IAAI,CAACQ,GAAG,YAAAP,SAAA,GAAI,IAAI;IAC5B,IAAI,CAACQ,WAAW,IAAAP,gBAAA,GAAGF,IAAI,CAACU,UAAU,YAAAR,gBAAA,GAAI,IAAI;IAC1C,IAAI,CAACS,aAAa,IAAAR,kBAAA,GAAGH,IAAI,CAACY,YAAY,YAAAT,kBAAA,GAAI,IAAI;IAC9C,IAAI,CAACU,sBAAsB,IAAAT,qBAAA,GAAGJ,IAAI,CAACc,qBAAqB,YAAAV,qBAAA,GAAI,IAAI;EACpE;EAAA,OAAAW,YAAA,CAAAhB,wBAAA;IAAAiB,GAAA;IAAAC,GAAA,EAEA,SAAAA,IAAA,EAAU;MACN,OAAO,IAAI,CAACV,IAAI;IACpB;EAAA;IAAAS,GAAA;IAAAC,GAAA,EAEA,SAAAA,IAAA,EAAmB;MACf,OAAO,IAAI,CAACN,aAAa;IAC7B;IAAAO,GAAA,EAEA,SAAAA,IAAiBC,SAAS,EAAE;MAExB,IAAIA,SAAS,IAAI,IAAI,IAAIA,SAAS,GAAG,CAAC,EAAE;QACpC,IAAI,CAACR,aAAa,GAAGQ,SAAS;MAClC,CAAC,MAAM;QACH,IAAI,CAACR,aAAa,GAAG,IAAI;MAC7B;IACJ;EAAA;IAAAK,GAAA;IAAAC,GAAA,EAEA,SAAAA,IAAA,EAAiB;MACb,OAAO,IAAI,CAACR,WAAW;IAC3B;IAAAS,GAAA,EAEA,SAAAA,IAAeE,OAAO,EAAE;MAEpB,IAAIA,OAAO,IAAI,IAAI,IAAIA,OAAO,IAAI,CAAC,EAAE;QACjC,IAAI,CAACX,WAAW,GAAGW,OAAO;MAC9B,CAAC,MAAM;QACH,IAAI,CAACX,WAAW,GAAG,IAAI;MAC3B;IACJ;EAAA;IAAAO,GAAA;IAAAC,GAAA,EAEA,SAAAA,IAAA,EAA4B;MACxB,OAAO,IAAI,CAACJ,sBAAsB;IACtC;IAAAK,GAAA,EAEA,SAAAA,IAA0BG,eAAe,EAAE;MAEvC,IAAIA,eAAe,IAAI,IAAI,IAAIA,eAAe,IAAI,CAAC,EAAE;QACjD,IAAI,CAACR,sBAAsB,GAAGQ,eAAe;MACjD,CAAC,MAAM;QACH,IAAI,CAACR,sBAAsB,GAAG,IAAI;MACtC;IACJ;EAAA;IAAAG,GAAA;IAAAM,KAAA,EAEA,SAAAC,MAAMA,CAAA,EAAiC;MACnC,IAAMC,GAAG,GAAG;QACRlB,MAAM,EAAE,IAAI,CAACA;MACjB,CAAC;MAED,IAAI,IAAI,CAACC,IAAI,KAAK,IAAI,EAAE;QACpBiB,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAACjB,IAAI;MAC1B;MAEA,IAAI,IAAI,CAACE,WAAW,KAAK,IAAI,EAAE;QAC3Be,GAAG,CAAC,YAAY,CAAC,GAAG,IAAI,CAACf,WAAW;MACxC;MAEA,IAAI,IAAI,CAACE,aAAa,KAAK,IAAI,EAAE;QAC7Ba,GAAG,CAAC,cAAc,CAAC,GAAG,IAAI,CAACb,aAAa;MAC5C;MAEA,IAAI,IAAI,CAACE,sBAAsB,KAAK,IAAI,EAAE;QACtCW,GAAG,CAAC,uBAAuB,CAAC,GAAG,IAAI,CAACX,sBAAsB;MAC9D;MAEA,OAAOW,GAAG;IACd;EAAA;AAAA;AAAA,SAhFiBzB,wBAAwB,IAAA0B,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}