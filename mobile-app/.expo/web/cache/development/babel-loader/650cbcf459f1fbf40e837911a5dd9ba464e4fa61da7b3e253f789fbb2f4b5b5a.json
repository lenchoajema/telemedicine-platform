{"ast":null,"code":"var _jsxFileName = \"/workspaces/telemedicine-platform/mobile-app/node_modules/react-native-toast-message/lib/src/components/AnimatedContainer.js\";\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useLogger, useGesture } from \"../contexts\";\nimport { usePanResponder, useSlideAnimation, useViewDimensions } from \"../hooks\";\nimport { noop } from \"../utils/func\";\nimport { bound } from \"../utils/number\";\nimport { getTestId } from \"../utils/test-id\";\nimport { styles } from \"./AnimatedContainer.styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function dampingFor(gesture, position) {\n  const {\n    moveY\n  } = gesture;\n  switch (position) {\n    case 'bottom':\n      {\n        const {\n          height: screenHeight\n        } = Dimensions.get('screen');\n        return Math.abs(screenHeight - moveY);\n      }\n    case 'top':\n      return Math.abs(moveY);\n    default:\n      throw new Error(`Toast position: ${position} not implemented`);\n  }\n}\nexport function animatedValueFor(gesture, position, damping) {\n  const boundValue = val => bound(val, 0, 2);\n  const {\n    dy\n  } = gesture;\n  switch (position) {\n    case 'bottom':\n      return boundValue(1 - dy / damping);\n    case 'top':\n      return boundValue(1 + dy / damping);\n    default:\n      throw new Error(`Toast position: ${position} not implemented`);\n  }\n}\nexport function AnimatedContainer({\n  children,\n  isVisible,\n  position,\n  topOffset,\n  bottomOffset,\n  keyboardOffset,\n  avoidKeyboard,\n  onHide,\n  onRestorePosition = noop,\n  swipeable\n}) {\n  const {\n    log\n  } = useLogger();\n  const {\n    panning\n  } = useGesture();\n  const {\n    computeViewDimensions,\n    height\n  } = useViewDimensions();\n  const {\n    animatedValue,\n    animate,\n    animationStyles\n  } = useSlideAnimation({\n    position,\n    height,\n    topOffset,\n    bottomOffset,\n    keyboardOffset,\n    avoidKeyboard\n  });\n  const disable = !swipeable || !isVisible;\n  const onStart = React.useCallback(() => {\n    log('Swipe, pan start');\n    panning.current = true;\n  }, [log, panning]);\n  const onEnd = React.useCallback(() => {\n    log('Swipe, pan end');\n    panning.current = false;\n  }, [log, panning]);\n  const onDismiss = React.useCallback(() => {\n    log('Swipe, dismissing');\n    animate(0);\n    onHide();\n  }, [animate, log, onHide]);\n  const onRestore = React.useCallback(() => {\n    log('Swipe, restoring to original position');\n    animate(1);\n    onRestorePosition();\n  }, [animate, log, onRestorePosition]);\n  const computeNewAnimatedValueForGesture = React.useCallback(gesture => {\n    const damping = dampingFor(gesture, position);\n    const newAnimatedValue = animatedValueFor(gesture, position, damping);\n    return newAnimatedValue;\n  }, [position]);\n  const {\n    panResponder\n  } = usePanResponder({\n    animatedValue,\n    computeNewAnimatedValueForGesture,\n    onDismiss,\n    onRestore,\n    onStart,\n    onEnd,\n    disable\n  });\n  React.useLayoutEffect(() => {\n    const newAnimationValue = isVisible ? 1 : 0;\n    animate(newAnimationValue);\n  }, [animate, isVisible]);\n  return _jsxDEV(Animated.View, Object.assign({\n    testID: getTestId('AnimatedContainer'),\n    onLayout: computeViewDimensions,\n    style: [styles.base, styles[position], animationStyles],\n    pointerEvents: \"box-none\"\n  }, panResponder.panHandlers, {\n    children: children\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 13\n  }, this);\n}","map":{"version":3,"names":["React","Animated","Dimensions","useLogger","useGesture","usePanResponder","useSlideAnimation","useViewDimensions","noop","bound","getTestId","styles","jsxDEV","_jsxDEV","dampingFor","gesture","position","moveY","height","screenHeight","get","Math","abs","Error","animatedValueFor","damping","boundValue","val","dy","AnimatedContainer","children","isVisible","topOffset","bottomOffset","keyboardOffset","avoidKeyboard","onHide","onRestorePosition","swipeable","log","panning","computeViewDimensions","animatedValue","animate","animationStyles","disable","onStart","useCallback","current","onEnd","onDismiss","onRestore","computeNewAnimatedValueForGesture","newAnimatedValue","panResponder","useLayoutEffect","newAnimationValue","View","Object","assign","testID","onLayout","style","base","pointerEvents","panHandlers","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/workspaces/telemedicine-platform/mobile-app/node_modules/react-native-toast-message/lib/src/components/AnimatedContainer.js"],"sourcesContent":["import React from 'react';\nimport { Animated, Dimensions } from 'react-native';\nimport { useLogger, useGesture } from '../contexts';\nimport { usePanResponder, useSlideAnimation, useViewDimensions } from '../hooks';\nimport { noop } from '../utils/func';\nimport { bound } from '../utils/number';\nimport { getTestId } from '../utils/test-id';\nimport { styles } from './AnimatedContainer.styles';\n/**\n * Produces a positive damping value.\n *\n * To note: `moveY` becomes negative when going off-screen. By making sure the value\n * produced is always positive, we avoid issues like: https://github.com/calintamas/react-native-toast-message/issues/280\n */\nexport function dampingFor(gesture, position) {\n    const { moveY } = gesture;\n    switch (position) {\n        case 'bottom': {\n            const { height: screenHeight } = Dimensions.get('screen');\n            return Math.abs(screenHeight - moveY);\n        }\n        case 'top':\n            return Math.abs(moveY);\n        default:\n            throw new Error(`Toast position: ${position} not implemented`);\n    }\n}\nexport function animatedValueFor(gesture, position, damping) {\n    const boundValue = (val) => bound(val, 0, 2);\n    const { dy } = gesture;\n    switch (position) {\n        case 'bottom':\n            return boundValue(1 - dy / damping);\n        case 'top':\n            return boundValue(1 + dy / damping);\n        default:\n            throw new Error(`Toast position: ${position} not implemented`);\n    }\n}\nexport function AnimatedContainer({ children, isVisible, position, topOffset, bottomOffset, keyboardOffset, avoidKeyboard, onHide, onRestorePosition = noop, swipeable }) {\n    const { log } = useLogger();\n    const { panning } = useGesture();\n    const { computeViewDimensions, height } = useViewDimensions();\n    const { animatedValue, animate, animationStyles } = useSlideAnimation({\n        position,\n        height,\n        topOffset,\n        bottomOffset,\n        keyboardOffset,\n        avoidKeyboard\n    });\n    const disable = !swipeable || !isVisible;\n    const onStart = React.useCallback(() => {\n        log('Swipe, pan start');\n        panning.current = true;\n    }, [log, panning]);\n    const onEnd = React.useCallback(() => {\n        log('Swipe, pan end');\n        panning.current = false;\n    }, [log, panning]);\n    const onDismiss = React.useCallback(() => {\n        log('Swipe, dismissing');\n        animate(0);\n        onHide();\n    }, [animate, log, onHide]);\n    const onRestore = React.useCallback(() => {\n        log('Swipe, restoring to original position');\n        animate(1);\n        onRestorePosition();\n    }, [animate, log, onRestorePosition]);\n    const computeNewAnimatedValueForGesture = React.useCallback((gesture) => {\n        const damping = dampingFor(gesture, position);\n        const newAnimatedValue = animatedValueFor(gesture, position, damping);\n        return newAnimatedValue;\n    }, [position]);\n    const { panResponder } = usePanResponder({\n        animatedValue,\n        computeNewAnimatedValueForGesture,\n        onDismiss,\n        onRestore,\n        onStart,\n        onEnd,\n        disable,\n    });\n    React.useLayoutEffect(() => {\n        const newAnimationValue = isVisible ? 1 : 0;\n        animate(newAnimationValue);\n    }, [animate, isVisible]);\n    return (<Animated.View testID={getTestId('AnimatedContainer')} onLayout={computeViewDimensions} style={[styles.base, styles[position], animationStyles]} \n    // This container View is never the target of touch events but its subviews can be.\n    // By doing this, tapping buttons behind the Toast is allowed\n    pointerEvents='box-none' {...panResponder.panHandlers}>\n      {children}\n    </Animated.View>);\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,QAAA;AAAA,OAAAC,UAAA;AAE1B,SAASC,SAAS,EAAEC,UAAU;AAC9B,SAASC,eAAe,EAAEC,iBAAiB,EAAEC,iBAAiB;AAC9D,SAASC,IAAI;AACb,SAASC,KAAK;AACd,SAASC,SAAS;AAClB,SAASC,MAAM;AAAqC,SAAAC,MAAA,IAAAC,OAAA;AAOpD,OAAO,SAASC,UAAUA,CAACC,OAAO,EAAEC,QAAQ,EAAE;EAC1C,MAAM;IAAEC;EAAM,CAAC,GAAGF,OAAO;EACzB,QAAQC,QAAQ;IACZ,KAAK,QAAQ;MAAE;QACX,MAAM;UAAEE,MAAM,EAAEC;QAAa,CAAC,GAAGjB,UAAU,CAACkB,GAAG,CAAC,QAAQ,CAAC;QACzD,OAAOC,IAAI,CAACC,GAAG,CAACH,YAAY,GAAGF,KAAK,CAAC;MACzC;IACA,KAAK,KAAK;MACN,OAAOI,IAAI,CAACC,GAAG,CAACL,KAAK,CAAC;IAC1B;MACI,MAAM,IAAIM,KAAK,CAAC,mBAAmBP,QAAQ,kBAAkB,CAAC;EACtE;AACJ;AACA,OAAO,SAASQ,gBAAgBA,CAACT,OAAO,EAAEC,QAAQ,EAAES,OAAO,EAAE;EACzD,MAAMC,UAAU,GAAIC,GAAG,IAAKlB,KAAK,CAACkB,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;EAC5C,MAAM;IAAEC;EAAG,CAAC,GAAGb,OAAO;EACtB,QAAQC,QAAQ;IACZ,KAAK,QAAQ;MACT,OAAOU,UAAU,CAAC,CAAC,GAAGE,EAAE,GAAGH,OAAO,CAAC;IACvC,KAAK,KAAK;MACN,OAAOC,UAAU,CAAC,CAAC,GAAGE,EAAE,GAAGH,OAAO,CAAC;IACvC;MACI,MAAM,IAAIF,KAAK,CAAC,mBAAmBP,QAAQ,kBAAkB,CAAC;EACtE;AACJ;AACA,OAAO,SAASa,iBAAiBA,CAAC;EAAEC,QAAQ;EAAEC,SAAS;EAAEf,QAAQ;EAAEgB,SAAS;EAAEC,YAAY;EAAEC,cAAc;EAAEC,aAAa;EAAEC,MAAM;EAAEC,iBAAiB,GAAG7B,IAAI;EAAE8B;AAAU,CAAC,EAAE;EACtK,MAAM;IAAEC;EAAI,CAAC,GAAGpC,SAAS,CAAC,CAAC;EAC3B,MAAM;IAAEqC;EAAQ,CAAC,GAAGpC,UAAU,CAAC,CAAC;EAChC,MAAM;IAAEqC,qBAAqB;IAAEvB;EAAO,CAAC,GAAGX,iBAAiB,CAAC,CAAC;EAC7D,MAAM;IAAEmC,aAAa;IAAEC,OAAO;IAAEC;EAAgB,CAAC,GAAGtC,iBAAiB,CAAC;IAClEU,QAAQ;IACRE,MAAM;IACNc,SAAS;IACTC,YAAY;IACZC,cAAc;IACdC;EACJ,CAAC,CAAC;EACF,MAAMU,OAAO,GAAG,CAACP,SAAS,IAAI,CAACP,SAAS;EACxC,MAAMe,OAAO,GAAG9C,KAAK,CAAC+C,WAAW,CAAC,MAAM;IACpCR,GAAG,CAAC,kBAAkB,CAAC;IACvBC,OAAO,CAACQ,OAAO,GAAG,IAAI;EAC1B,CAAC,EAAE,CAACT,GAAG,EAAEC,OAAO,CAAC,CAAC;EAClB,MAAMS,KAAK,GAAGjD,KAAK,CAAC+C,WAAW,CAAC,MAAM;IAClCR,GAAG,CAAC,gBAAgB,CAAC;IACrBC,OAAO,CAACQ,OAAO,GAAG,KAAK;EAC3B,CAAC,EAAE,CAACT,GAAG,EAAEC,OAAO,CAAC,CAAC;EAClB,MAAMU,SAAS,GAAGlD,KAAK,CAAC+C,WAAW,CAAC,MAAM;IACtCR,GAAG,CAAC,mBAAmB,CAAC;IACxBI,OAAO,CAAC,CAAC,CAAC;IACVP,MAAM,CAAC,CAAC;EACZ,CAAC,EAAE,CAACO,OAAO,EAAEJ,GAAG,EAAEH,MAAM,CAAC,CAAC;EAC1B,MAAMe,SAAS,GAAGnD,KAAK,CAAC+C,WAAW,CAAC,MAAM;IACtCR,GAAG,CAAC,uCAAuC,CAAC;IAC5CI,OAAO,CAAC,CAAC,CAAC;IACVN,iBAAiB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACM,OAAO,EAAEJ,GAAG,EAAEF,iBAAiB,CAAC,CAAC;EACrC,MAAMe,iCAAiC,GAAGpD,KAAK,CAAC+C,WAAW,CAAEhC,OAAO,IAAK;IACrE,MAAMU,OAAO,GAAGX,UAAU,CAACC,OAAO,EAAEC,QAAQ,CAAC;IAC7C,MAAMqC,gBAAgB,GAAG7B,gBAAgB,CAACT,OAAO,EAAEC,QAAQ,EAAES,OAAO,CAAC;IACrE,OAAO4B,gBAAgB;EAC3B,CAAC,EAAE,CAACrC,QAAQ,CAAC,CAAC;EACd,MAAM;IAAEsC;EAAa,CAAC,GAAGjD,eAAe,CAAC;IACrCqC,aAAa;IACbU,iCAAiC;IACjCF,SAAS;IACTC,SAAS;IACTL,OAAO;IACPG,KAAK;IACLJ;EACJ,CAAC,CAAC;EACF7C,KAAK,CAACuD,eAAe,CAAC,MAAM;IACxB,MAAMC,iBAAiB,GAAGzB,SAAS,GAAG,CAAC,GAAG,CAAC;IAC3CY,OAAO,CAACa,iBAAiB,CAAC;EAC9B,CAAC,EAAE,CAACb,OAAO,EAAEZ,SAAS,CAAC,CAAC;EACxB,OAAQlB,OAAA,CAACZ,QAAQ,CAACwD,IAAI,EAAAC,MAAA,CAAAC,MAAA;IAACC,MAAM,EAAElD,SAAS,CAAC,mBAAmB,CAAE;IAACmD,QAAQ,EAAEpB,qBAAsB;IAACqB,KAAK,EAAE,CAACnD,MAAM,CAACoD,IAAI,EAAEpD,MAAM,CAACK,QAAQ,CAAC,EAAE4B,eAAe,CAAE;IAGxJoB,aAAa,EAAC;EAAU,GAAKV,YAAY,CAACW,WAAW;IAAAnC,QAAA,EAClDA;EAAQ;IAAAoC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AACpB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}