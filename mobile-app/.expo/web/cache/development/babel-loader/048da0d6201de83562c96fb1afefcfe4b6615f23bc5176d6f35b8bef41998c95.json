{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport RTCRtpCodecCapability from \"./RTCRtpCodecCapability\";\nvar WebRTCModule = NativeModules.WebRTCModule;\nvar RTCRtpCapabilities = function () {\n  function RTCRtpCapabilities(codecs) {\n    _classCallCheck(this, RTCRtpCapabilities);\n    this._codecs = [];\n    this._codecs = codecs;\n    Object.freeze(this);\n  }\n  return _createClass(RTCRtpCapabilities, [{\n    key: \"codecs\",\n    get: function get() {\n      return this._codecs;\n    }\n  }]);\n}();\nexport { RTCRtpCapabilities as default };\nfunction getCapabilities(endpoint) {\n  switch (endpoint) {\n    case 'sender':\n      {\n        var capabilities = WebRTCModule.senderGetCapabilities();\n        if (!capabilities) {\n          return null;\n        }\n        return new RTCRtpCapabilities(capabilities.codecs);\n      }\n    case 'receiver':\n      {\n        var _capabilities = WebRTCModule.receiverGetCapabilities();\n        if (!_capabilities) {\n          return null;\n        }\n        return new RTCRtpCapabilities(_capabilities.codecs);\n      }\n    default:\n      throw new TypeError('Invalid endpoint: ' + endpoint);\n  }\n}\nexport var DEFAULT_AUDIO_CAPABILITIES = new RTCRtpCapabilities([new RTCRtpCodecCapability({\n  mimeType: 'audio/G722'\n}), new RTCRtpCodecCapability({\n  mimeType: 'audio/iLBC'\n})]);\nexport var senderCapabilities = getCapabilities('sender');\nexport var receiverCapabilities = getCapabilities('receiver');","map":{"version":3,"names":["RTCRtpCodecCapability","WebRTCModule","NativeModules","RTCRtpCapabilities","codecs","_classCallCheck","_codecs","Object","freeze","_createClass","key","get","default","getCapabilities","endpoint","capabilities","senderGetCapabilities","receiverGetCapabilities","TypeError","DEFAULT_AUDIO_CAPABILITIES","mimeType","senderCapabilities","receiverCapabilities"],"sources":["/workspaces/telemedicine-platform/mobile-app/node_modules/react-native-webrtc/src/RTCRtpCapabilities.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\n\nimport RTCRtpCodecCapability from './RTCRtpCodecCapability';\nconst { WebRTCModule } = NativeModules;\n\n/**\n * @brief represents codec capabilities for senders and receivers. Currently\n * this only supports codec names and does not have other\n * fields like clockRate and numChannels and such.\n */\nexport default class RTCRtpCapabilities {\n    _codecs: RTCRtpCodecCapability[] = [];\n    constructor(codecs: RTCRtpCodecCapability[]) {\n        this._codecs = codecs;\n        Object.freeze(this);\n    }\n\n    get codecs() {\n        return this._codecs;\n    }\n}\n\n\nfunction getCapabilities(endpoint: 'sender' | 'receiver'): RTCRtpCapabilities | null {\n    switch (endpoint) {\n        case 'sender': {\n            const capabilities = WebRTCModule.senderGetCapabilities();\n\n            if (!capabilities) {\n                return null;\n            }\n\n            return new RTCRtpCapabilities(capabilities.codecs);\n        }\n\n        case 'receiver': {\n            const capabilities = WebRTCModule.receiverGetCapabilities();\n\n            if (!capabilities) {\n                return null;\n            }\n\n            return new RTCRtpCapabilities(capabilities.codecs);\n        }\n\n        default:\n            throw new TypeError('Invalid endpoint: ' + endpoint);\n    }\n}\n\n\n/**\n * Hardcoded audio capabilities based on the WebRTC native documentation:\n * https://webrtc.github.io/webrtc-org/faq/. The mime type is specified in\n * https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#rtp-parameters-2.\n */\nexport const DEFAULT_AUDIO_CAPABILITIES = new RTCRtpCapabilities([\n    new RTCRtpCodecCapability({ mimeType: 'audio/G722' }),\n    new RTCRtpCodecCapability({ mimeType: 'audio/iLBC' }),\n]);\n\n// Initialize capabilities on module import\nexport const senderCapabilities = getCapabilities('sender');\nexport const receiverCapabilities = getCapabilities('receiver');\n\n"],"mappings":";;;AAEA,OAAOA,qBAAqB;AAC5B,IAAQC,YAAA,GAAiBC,aAAa,CAA9BD,YAAA;AAA8B,IAOjBE,kBAAkB;EAEnC,SAAAA,mBAAYC,MAA+B,EAAE;IAAAC,eAAA,OAAAF,kBAAA;IAAA,KAD7CG,OAAO,GAA4B,EAAE;IAEjC,IAAI,CAACA,OAAO,GAAGF,MAAM;IACrBG,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACvB;EAAA,OAAAC,YAAA,CAAAN,kBAAA;IAAAO,GAAA;IAAAC,GAAA,EAEA,SAAAA,IAAA,EAAa;MACT,OAAO,IAAI,CAACL,OAAO;IACvB;EAAA;AAAA;AAAA,SATiBH,kBAAkB,IAAAS,OAAA;AAavC,SAASC,eAAeA,CAACC,QAA+B,EAA6B;EACjF,QAAQA,QAAQ;IACZ,KAAK,QAAQ;MAAE;QACX,IAAMC,YAAY,GAAGd,YAAY,CAACe,qBAAqB,CAAC,CAAC;QAEzD,IAAI,CAACD,YAAY,EAAE;UACf,OAAO,IAAI;QACf;QAEA,OAAO,IAAIZ,kBAAkB,CAACY,YAAY,CAACX,MAAM,CAAC;MACtD;IAEA,KAAK,UAAU;MAAE;QACb,IAAMW,aAAY,GAAGd,YAAY,CAACgB,uBAAuB,CAAC,CAAC;QAE3D,IAAI,CAACF,aAAY,EAAE;UACf,OAAO,IAAI;QACf;QAEA,OAAO,IAAIZ,kBAAkB,CAACY,aAAY,CAACX,MAAM,CAAC;MACtD;IAEA;MACI,MAAM,IAAIc,SAAS,CAAC,oBAAoB,GAAGJ,QAAQ,CAAC;EAC5D;AACJ;AAQA,OAAO,IAAMK,0BAA0B,GAAG,IAAIhB,kBAAkB,CAAC,CAC7D,IAAIH,qBAAqB,CAAC;EAAEoB,QAAQ,EAAE;AAAa,CAAC,CAAC,EACrD,IAAIpB,qBAAqB,CAAC;EAAEoB,QAAQ,EAAE;AAAa,CAAC,CAAC,CACxD,CAAC;AAGF,OAAO,IAAMC,kBAAkB,GAAGR,eAAe,CAAC,QAAQ,CAAC;AAC3D,OAAO,IAAMS,oBAAoB,GAAGT,eAAe,CAAC,UAAU,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}