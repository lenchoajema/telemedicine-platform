{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar WebRTCModule = NativeModules.WebRTCModule;\nvar RTCRtpTransceiver = function () {\n  function RTCRtpTransceiver(args) {\n    var _args$mid, _args$currentDirectio;\n    _classCallCheck(this, RTCRtpTransceiver);\n    this._mid = null;\n    this._peerConnectionId = args.peerConnectionId;\n    this._mid = (_args$mid = args.mid) != null ? _args$mid : null;\n    this._direction = args.direction;\n    this._currentDirection = (_args$currentDirectio = args.currentDirection) != null ? _args$currentDirectio : null;\n    this._stopped = Boolean(args.isStopped);\n    this._sender = args.sender;\n    this._receiver = args.receiver;\n  }\n  return _createClass(RTCRtpTransceiver, [{\n    key: \"mid\",\n    get: function get() {\n      return this._mid;\n    }\n  }, {\n    key: \"stopped\",\n    get: function get() {\n      return this._stopped;\n    }\n  }, {\n    key: \"direction\",\n    get: function get() {\n      return this._direction;\n    },\n    set: function set(val) {\n      var _this = this;\n      if (!['sendonly', 'recvonly', 'sendrecv', 'inactive'].includes(val)) {\n        throw new TypeError('Invalid direction provided');\n      }\n      if (this._stopped) {\n        throw new Error('Transceiver Stopped');\n      }\n      if (this._direction === val) {\n        return;\n      }\n      var oldDirection = this._direction;\n      WebRTCModule.transceiverSetDirection(this._peerConnectionId, this.sender.id, val).catch(function () {\n        _this._direction = oldDirection;\n      });\n      this._direction = val;\n    }\n  }, {\n    key: \"currentDirection\",\n    get: function get() {\n      return this._currentDirection;\n    }\n  }, {\n    key: \"sender\",\n    get: function get() {\n      return this._sender;\n    }\n  }, {\n    key: \"receiver\",\n    get: function get() {\n      return this._receiver;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var _this2 = this;\n      if (this._stopped) {\n        return;\n      }\n      WebRTCModule.transceiverStop(this._peerConnectionId, this.sender.id).then(function () {\n        return _this2._setStopped();\n      });\n    }\n  }, {\n    key: \"_setStopped\",\n    value: function _setStopped() {\n      this._stopped = true;\n      this._direction = 'stopped';\n      this._currentDirection = 'stopped';\n      this._mid = null;\n    }\n  }]);\n}();\nexport { RTCRtpTransceiver as default };","map":{"version":3,"names":["WebRTCModule","NativeModules","RTCRtpTransceiver","args","_args$mid","_args$currentDirectio","_classCallCheck","_mid","_peerConnectionId","peerConnectionId","mid","_direction","direction","_currentDirection","currentDirection","_stopped","Boolean","isStopped","_sender","sender","_receiver","receiver","_createClass","key","get","set","val","_this","includes","TypeError","Error","oldDirection","transceiverSetDirection","id","catch","value","stop","_this2","transceiverStop","then","_setStopped","default"],"sources":["/workspaces/telemedicine-platform/mobile-app/node_modules/react-native-webrtc/src/RTCRtpTransceiver.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\n\nimport RTCRtpReceiver from './RTCRtpReceiver';\nimport RTCRtpSender from './RTCRtpSender';\n\nconst { WebRTCModule } = NativeModules;\n\nexport default class RTCRtpTransceiver {\n    _peerConnectionId: number;\n    _sender: RTCRtpSender;\n    _receiver: RTCRtpReceiver;\n\n    _mid: string | null = null;\n    _direction: string;\n    _currentDirection: string;\n    _stopped: boolean;\n\n    constructor(args: {\n        peerConnectionId: number,\n        isStopped: boolean,\n        direction: string,\n        currentDirection: string,\n        mid?: string,\n        sender: RTCRtpSender,\n        receiver: RTCRtpReceiver,\n    }) {\n        this._peerConnectionId = args.peerConnectionId;\n        this._mid = args.mid ?? null;\n        this._direction = args.direction;\n        this._currentDirection = args.currentDirection ?? null;\n        this._stopped = Boolean(args.isStopped);\n        this._sender = args.sender;\n        this._receiver = args.receiver;\n    }\n\n    get mid() {\n        return this._mid;\n    }\n\n    get stopped() {\n        return this._stopped;\n    }\n\n    get direction() {\n        return this._direction;\n    }\n\n    set direction(val) {\n        if (![ 'sendonly', 'recvonly', 'sendrecv', 'inactive' ].includes(val)) {\n            throw new TypeError('Invalid direction provided');\n        }\n\n        if (this._stopped) {\n            throw new Error('Transceiver Stopped');\n        }\n\n        if (this._direction === val) {\n            return;\n        }\n\n        const oldDirection = this._direction;\n\n        WebRTCModule.transceiverSetDirection(this._peerConnectionId, this.sender.id, val)\n            .catch(() => {\n                this._direction = oldDirection;\n            });\n\n        this._direction = val;\n    }\n\n    get currentDirection() {\n        return this._currentDirection;\n    }\n\n    get sender() {\n        return this._sender;\n    }\n\n    get receiver() {\n        return this._receiver;\n    }\n\n    stop() {\n        if (this._stopped) {\n            return;\n        }\n\n        WebRTCModule.transceiverStop(this._peerConnectionId, this.sender.id)\n            .then(() => this._setStopped());\n    }\n\n    _setStopped() {\n        this._stopped = true;\n        this._direction = 'stopped';\n        this._currentDirection = 'stopped';\n        this._mid = null;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}